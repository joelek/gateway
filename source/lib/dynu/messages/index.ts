// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "@joelek/ts-autoguard/dist/lib-shared";

export const Domain = autoguard.guards.Object.of({
	"id": autoguard.guards.Number,
	"name": autoguard.guards.String
});

export type Domain = ReturnType<typeof Domain["as"]>;

export const GenericRecord = autoguard.guards.Object.of({
	"id": autoguard.guards.Number,
	"domainId": autoguard.guards.Number,
	"nodeName": autoguard.guards.String,
	"state": autoguard.guards.Boolean,
	"recordType": autoguard.guards.String
});

export type GenericRecord = ReturnType<typeof GenericRecord["as"]>;

export const TextRecord = autoguard.guards.Intersection.of(
	autoguard.guards.Reference.of(() => GenericRecord),
	autoguard.guards.Object.of({
		"recordType": autoguard.guards.StringLiteral.of("TXT"),
		"textData": autoguard.guards.String
	})
);

export type TextRecord = ReturnType<typeof TextRecord["as"]>;

export const Record = autoguard.guards.Union.of(
	autoguard.guards.Reference.of(() => GenericRecord),
	autoguard.guards.Reference.of(() => TextRecord)
);

export type Record = ReturnType<typeof Record["as"]>;

export const GetDomainsResponse = autoguard.guards.Object.of({
	"body": autoguard.guards.Object.of({
		"domains": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Domain))
	})
});

export type GetDomainsResponse = ReturnType<typeof GetDomainsResponse["as"]>;

export const GetRecordsResponse = autoguard.guards.Object.of({
	"body": autoguard.guards.Object.of({
		"dnsRecords": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Record))
	})
});

export type GetRecordsResponse = ReturnType<typeof GetRecordsResponse["as"]>;

export const CreateRecordResponse = autoguard.guards.Object.of({
	"body": autoguard.guards.Reference.of(() => Record)
});

export type CreateRecordResponse = ReturnType<typeof CreateRecordResponse["as"]>;

export const UpdateRecordResponse = autoguard.guards.Object.of({
	"body": autoguard.guards.Reference.of(() => Record)
});

export type UpdateRecordResponse = ReturnType<typeof UpdateRecordResponse["as"]>;

export const DeleteRecordResponse = autoguard.guards.Object.of({
	"body": autoguard.guards.Object.of({})
});

export type DeleteRecordResponse = ReturnType<typeof DeleteRecordResponse["as"]>;

export namespace Autoguard {
	export const Guards = {
		"Domain": autoguard.guards.Reference.of(() => Domain),
		"GenericRecord": autoguard.guards.Reference.of(() => GenericRecord),
		"TextRecord": autoguard.guards.Reference.of(() => TextRecord),
		"Record": autoguard.guards.Reference.of(() => Record),
		"GetDomainsResponse": autoguard.guards.Reference.of(() => GetDomainsResponse),
		"GetRecordsResponse": autoguard.guards.Reference.of(() => GetRecordsResponse),
		"CreateRecordResponse": autoguard.guards.Reference.of(() => CreateRecordResponse),
		"UpdateRecordResponse": autoguard.guards.Reference.of(() => UpdateRecordResponse),
		"DeleteRecordResponse": autoguard.guards.Reference.of(() => DeleteRecordResponse)
	};

	export type Guards = { [A in keyof typeof Guards]: ReturnType<typeof Guards[A]["as"]>; };

	export const Requests = {};

	export type Requests = { [A in keyof typeof Requests]: ReturnType<typeof Requests[A]["as"]>; };

	export const Responses = {};

	export type Responses = { [A in keyof typeof Responses]: ReturnType<typeof Responses[A]["as"]>; };
};
