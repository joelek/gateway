// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "@joelek/ts-autoguard/dist/lib-shared";

export const Domain = autoguard.guards.Object.of({
	"id": autoguard.guards.Number,
	"name": autoguard.guards.String
});

export type Domain = ReturnType<typeof Domain["as"]>;

export const DomainRecordStubGeneric = autoguard.guards.Object.of({
	"nodeName": autoguard.guards.String,
	"recordType": autoguard.guards.String
});

export type DomainRecordStubGeneric = ReturnType<typeof DomainRecordStubGeneric["as"]>;

export const DomainRecordStubTXT = autoguard.guards.Intersection.of(
	autoguard.guards.Reference.of(() => DomainRecordStubGeneric),
	autoguard.guards.Object.of({
		"recordType": autoguard.guards.StringLiteral.of("TXT"),
		"textData": autoguard.guards.String
	})
);

export type DomainRecordStubTXT = ReturnType<typeof DomainRecordStubTXT["as"]>;

export const DomainRecordStub = autoguard.guards.Union.of(
	autoguard.guards.Reference.of(() => DomainRecordStubGeneric),
	autoguard.guards.Reference.of(() => DomainRecordStubTXT)
);

export type DomainRecordStub = ReturnType<typeof DomainRecordStub["as"]>;

export const DomainRecordBase = autoguard.guards.Object.of({
	"id": autoguard.guards.Number,
	"domainId": autoguard.guards.Number
});

export type DomainRecordBase = ReturnType<typeof DomainRecordBase["as"]>;

export const DomainRecordGeneric = autoguard.guards.Intersection.of(
	autoguard.guards.Reference.of(() => DomainRecordBase),
	autoguard.guards.Reference.of(() => DomainRecordStubGeneric)
);

export type DomainRecordGeneric = ReturnType<typeof DomainRecordGeneric["as"]>;

export const DomainRecordTXT = autoguard.guards.Intersection.of(
	autoguard.guards.Reference.of(() => DomainRecordBase),
	autoguard.guards.Reference.of(() => DomainRecordStubTXT)
);

export type DomainRecordTXT = ReturnType<typeof DomainRecordTXT["as"]>;

export const DomainRecord = autoguard.guards.Union.of(
	autoguard.guards.Reference.of(() => DomainRecordGeneric),
	autoguard.guards.Reference.of(() => DomainRecordTXT)
);

export type DomainRecord = ReturnType<typeof DomainRecord["as"]>;

export namespace Autoguard {
	export const Guards = {
		"Domain": autoguard.guards.Reference.of(() => Domain),
		"DomainRecordStubGeneric": autoguard.guards.Reference.of(() => DomainRecordStubGeneric),
		"DomainRecordStubTXT": autoguard.guards.Reference.of(() => DomainRecordStubTXT),
		"DomainRecordStub": autoguard.guards.Reference.of(() => DomainRecordStub),
		"DomainRecordBase": autoguard.guards.Reference.of(() => DomainRecordBase),
		"DomainRecordGeneric": autoguard.guards.Reference.of(() => DomainRecordGeneric),
		"DomainRecordTXT": autoguard.guards.Reference.of(() => DomainRecordTXT),
		"DomainRecord": autoguard.guards.Reference.of(() => DomainRecord)
	};

	export type Guards = { [A in keyof typeof Guards]: ReturnType<typeof Guards[A]["as"]>; };

	export const Requests = {
		"listDomains": autoguard.guards.Object.of({
			"options": autoguard.guards.Union.of(
				autoguard.guards.Intersection.of(
					autoguard.guards.Object.of({}),
					autoguard.api.Options
				),
				autoguard.guards.Undefined
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Intersection.of(
					autoguard.guards.Object.of({}),
					autoguard.api.Headers
				),
				autoguard.guards.Undefined
			),
			"payload": autoguard.guards.Union.of(
				autoguard.api.Binary,
				autoguard.guards.Undefined
			)
		}),
		"listDomainRecords": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.guards.Object.of({
					"domainid": autoguard.guards.Number
				}),
				autoguard.api.Options
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Intersection.of(
					autoguard.guards.Object.of({}),
					autoguard.api.Headers
				),
				autoguard.guards.Undefined
			),
			"payload": autoguard.guards.Union.of(
				autoguard.api.Binary,
				autoguard.guards.Undefined
			)
		}),
		"createDomainRecord": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.guards.Object.of({
					"domainid": autoguard.guards.Number
				}),
				autoguard.api.Options
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Intersection.of(
					autoguard.guards.Object.of({}),
					autoguard.api.Headers
				),
				autoguard.guards.Undefined
			),
			"payload": autoguard.guards.Reference.of(() => DomainRecordStub)
		}),
		"updateDomainRecord": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.guards.Object.of({
					"domainid": autoguard.guards.Number,
					"recordid": autoguard.guards.Number
				}),
				autoguard.api.Options
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Intersection.of(
					autoguard.guards.Object.of({}),
					autoguard.api.Headers
				),
				autoguard.guards.Undefined
			),
			"payload": autoguard.guards.Reference.of(() => DomainRecordStub)
		}),
		"deleteDomainRecord": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.guards.Object.of({
					"domainid": autoguard.guards.Number,
					"recordid": autoguard.guards.Number
				}),
				autoguard.api.Options
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Intersection.of(
					autoguard.guards.Object.of({}),
					autoguard.api.Headers
				),
				autoguard.guards.Undefined
			),
			"payload": autoguard.guards.Union.of(
				autoguard.api.Binary,
				autoguard.guards.Undefined
			)
		})
	};

	export type Requests = { [A in keyof typeof Requests]: ReturnType<typeof Requests[A]["as"]>; };

	export const Responses = {
		"listDomains": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Number,
				autoguard.guards.Undefined
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Intersection.of(
					autoguard.guards.Object.of({}),
					autoguard.api.Headers
				),
				autoguard.guards.Undefined
			),
			"payload": autoguard.guards.Object.of({
				"domains": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Domain))
			})
		}),
		"listDomainRecords": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Number,
				autoguard.guards.Undefined
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Intersection.of(
					autoguard.guards.Object.of({}),
					autoguard.api.Headers
				),
				autoguard.guards.Undefined
			),
			"payload": autoguard.guards.Object.of({
				"dnsRecords": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => DomainRecord))
			})
		}),
		"createDomainRecord": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Number,
				autoguard.guards.Undefined
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Intersection.of(
					autoguard.guards.Object.of({}),
					autoguard.api.Headers
				),
				autoguard.guards.Undefined
			),
			"payload": autoguard.guards.Reference.of(() => DomainRecord)
		}),
		"updateDomainRecord": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Number,
				autoguard.guards.Undefined
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Intersection.of(
					autoguard.guards.Object.of({}),
					autoguard.api.Headers
				),
				autoguard.guards.Undefined
			),
			"payload": autoguard.guards.Reference.of(() => DomainRecord)
		}),
		"deleteDomainRecord": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Number,
				autoguard.guards.Undefined
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Intersection.of(
					autoguard.guards.Object.of({}),
					autoguard.api.Headers
				),
				autoguard.guards.Undefined
			),
			"payload": autoguard.guards.Object.of({})
		})
	};

	export type Responses = { [A in keyof typeof Responses]: ReturnType<typeof Responses[A]["as"]>; };
};
