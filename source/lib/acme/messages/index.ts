// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "@joelek/ts-autoguard/dist/lib-shared";

export const AccountBase: autoguard.serialization.MessageGuard<AccountBase> = autoguard.guards.Object.of({}, {
	"contact": autoguard.guards.Array.of(autoguard.guards.String),
	"termsOfServiceAgreed": autoguard.guards.Boolean,
	"externalAccountBinding": autoguard.guards.Object.of({}, {})
});

export type AccountBase = autoguard.guards.Object<{}, {
	"contact": autoguard.guards.Array<autoguard.guards.String>,
	"termsOfServiceAgreed": autoguard.guards.Boolean,
	"externalAccountBinding": autoguard.guards.Object<{}, {}>
}>;

export const Account: autoguard.serialization.MessageGuard<Account> = autoguard.guards.Intersection.of(
	autoguard.guards.Reference.of(() => AccountBase),
	autoguard.guards.Object.of({
		"status": autoguard.guards.Union.of(
			autoguard.guards.StringLiteral.of("valid"),
			autoguard.guards.StringLiteral.of("deactivated"),
			autoguard.guards.StringLiteral.of("revoked")
		),
		"orders": autoguard.guards.String
	}, {})
);

export type Account = autoguard.guards.Intersection<[
	autoguard.guards.Reference<AccountBase>,
	autoguard.guards.Object<{
		"status": autoguard.guards.Union<[
			autoguard.guards.StringLiteral<"valid">,
			autoguard.guards.StringLiteral<"deactivated">,
			autoguard.guards.StringLiteral<"revoked">
		]>,
		"orders": autoguard.guards.String
	}, {}>
]>;

export const NewAccountJWSPayload: autoguard.serialization.MessageGuard<NewAccountJWSPayload> = autoguard.guards.Intersection.of(
	autoguard.guards.Reference.of(() => AccountBase),
	autoguard.guards.Object.of({}, {
		"onlyReturnExisting": autoguard.guards.Boolean
	})
);

export type NewAccountJWSPayload = autoguard.guards.Intersection<[
	autoguard.guards.Reference<AccountBase>,
	autoguard.guards.Object<{}, {
		"onlyReturnExisting": autoguard.guards.Boolean
	}>
]>;

export const GetDirectoryResponse: autoguard.serialization.MessageGuard<GetDirectoryResponse> = autoguard.guards.Object.of({
	"body": autoguard.guards.Object.of({
		"keyChange": autoguard.guards.String,
		"newAccount": autoguard.guards.String,
		"newNonce": autoguard.guards.String,
		"newOrder": autoguard.guards.String,
		"revokeCert": autoguard.guards.String
	}, {
		"meta": autoguard.guards.Object.of({}, {
			"caaIdentities": autoguard.guards.Array.of(autoguard.guards.String),
			"externalAccountRequired": autoguard.guards.Boolean,
			"termsOfService": autoguard.guards.String,
			"website": autoguard.guards.String
		}),
		"newAuthz": autoguard.guards.String
	})
}, {});

export type GetDirectoryResponse = autoguard.guards.Object<{
	"body": autoguard.guards.Object<{
		"keyChange": autoguard.guards.String,
		"newAccount": autoguard.guards.String,
		"newNonce": autoguard.guards.String,
		"newOrder": autoguard.guards.String,
		"revokeCert": autoguard.guards.String
	}, {
		"meta": autoguard.guards.Object<{}, {
			"caaIdentities": autoguard.guards.Array<autoguard.guards.String>,
			"externalAccountRequired": autoguard.guards.Boolean,
			"termsOfService": autoguard.guards.String,
			"website": autoguard.guards.String
		}>,
		"newAuthz": autoguard.guards.String
	}>
}, {}>;

export const NewNonceResponse: autoguard.serialization.MessageGuard<NewNonceResponse> = autoguard.guards.Object.of({
	"status": autoguard.guards.NumberLiteral.of(200),
	"headers": autoguard.guards.Object.of({
		"Replay-Nonce": autoguard.guards.Tuple.of(
			autoguard.guards.String
		)
	}, {})
}, {});

export type NewNonceResponse = autoguard.guards.Object<{
	"status": autoguard.guards.NumberLiteral<200>,
	"headers": autoguard.guards.Object<{
		"Replay-Nonce": autoguard.guards.Tuple<[
			autoguard.guards.String
		]>
	}, {}>
}, {}>;

export const NewAccountResponse: autoguard.serialization.MessageGuard<NewAccountResponse> = autoguard.guards.Object.of({
	"status": autoguard.guards.NumberLiteral.of(201),
	"headers": autoguard.guards.Object.of({
		"Replay-Nonce": autoguard.guards.Tuple.of(
			autoguard.guards.String
		),
		"Location": autoguard.guards.Tuple.of(
			autoguard.guards.String
		)
	}, {}),
	"body": autoguard.guards.Reference.of(() => Account)
}, {});

export type NewAccountResponse = autoguard.guards.Object<{
	"status": autoguard.guards.NumberLiteral<201>,
	"headers": autoguard.guards.Object<{
		"Replay-Nonce": autoguard.guards.Tuple<[
			autoguard.guards.String
		]>,
		"Location": autoguard.guards.Tuple<[
			autoguard.guards.String
		]>
	}, {}>,
	"body": autoguard.guards.Reference<Account>
}, {}>;

export namespace Autoguard {
	export const Guards = {
		"AccountBase": autoguard.guards.Reference.of(() => AccountBase),
		"Account": autoguard.guards.Reference.of(() => Account),
		"NewAccountJWSPayload": autoguard.guards.Reference.of(() => NewAccountJWSPayload),
		"GetDirectoryResponse": autoguard.guards.Reference.of(() => GetDirectoryResponse),
		"NewNonceResponse": autoguard.guards.Reference.of(() => NewNonceResponse),
		"NewAccountResponse": autoguard.guards.Reference.of(() => NewAccountResponse)
	};

	export type Guards = { [A in keyof typeof Guards]: ReturnType<typeof Guards[A]["as"]>; };

	export const Requests = {};

	export type Requests = { [A in keyof typeof Requests]: ReturnType<typeof Requests[A]["as"]>; };

	export const Responses = {};

	export type Responses = { [A in keyof typeof Responses]: ReturnType<typeof Responses[A]["as"]>; };
};
