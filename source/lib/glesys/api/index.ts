// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "@joelek/ts-autoguard/dist/lib-shared";

export const Status = autoguard.guards.Object.of({
	"code": autoguard.guards.Number,
	"timestamp": autoguard.guards.String,
	"text": autoguard.guards.String,
	"transactionid": autoguard.guards.Union.of(
		autoguard.guards.Any,
		autoguard.guards.Null
	)
});

export type Status = ReturnType<typeof Status["as"]>;

export const Domain = autoguard.guards.Object.of({
	"domainname": autoguard.guards.String,
	"createtime": autoguard.guards.String,
	"displayname": autoguard.guards.String,
	"recordcount": autoguard.guards.Number,
	"resolvednameservers": autoguard.guards.Array.of(autoguard.guards.String),
	"usingglesysnameserver": autoguard.guards.String,
	"registrarinfo": autoguard.guards.Object.of({
		"state": autoguard.guards.String,
		"expire": autoguard.guards.String,
		"autorenew": autoguard.guards.String,
		"configurednameservers": autoguard.guards.Array.of(autoguard.guards.String)
	})
});

export type Domain = ReturnType<typeof Domain["as"]>;

export const DomainRecordHost = autoguard.guards.Union.of(
	autoguard.guards.StringLiteral.of("@"),
	autoguard.guards.String
);

export type DomainRecordHost = ReturnType<typeof DomainRecordHost["as"]>;

export const DomainRecordType = autoguard.guards.Union.of(
	autoguard.guards.StringLiteral.of("A"),
	autoguard.guards.StringLiteral.of("NS"),
	autoguard.guards.StringLiteral.of("MX"),
	autoguard.guards.StringLiteral.of("TXT"),
	autoguard.guards.String
);

export type DomainRecordType = ReturnType<typeof DomainRecordType["as"]>;

export const DomainRecord = autoguard.guards.Object.of({
	"recordid": autoguard.guards.Number,
	"domainname": autoguard.guards.String,
	"host": autoguard.guards.Reference.of(() => DomainRecordHost),
	"type": autoguard.guards.Reference.of(() => DomainRecordType),
	"data": autoguard.guards.String,
	"ttl": autoguard.guards.Number
});

export type DomainRecord = ReturnType<typeof DomainRecord["as"]>;

export namespace Autoguard {
	export const Guards = {
		"Status": autoguard.guards.Reference.of(() => Status),
		"Domain": autoguard.guards.Reference.of(() => Domain),
		"DomainRecordHost": autoguard.guards.Reference.of(() => DomainRecordHost),
		"DomainRecordType": autoguard.guards.Reference.of(() => DomainRecordType),
		"DomainRecord": autoguard.guards.Reference.of(() => DomainRecord)
	};

	export type Guards = { [A in keyof typeof Guards]: ReturnType<typeof Guards[A]["as"]>; };

	export const Requests = {
		"listDomains": autoguard.guards.Object.of({
			"options": autoguard.guards.Union.of(
				autoguard.guards.Intersection.of(
					autoguard.guards.Object.of({}),
					autoguard.api.Options
				),
				autoguard.guards.Undefined
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Intersection.of(
					autoguard.guards.Object.of({}),
					autoguard.api.Headers
				),
				autoguard.guards.Undefined
			),
			"payload": autoguard.guards.Union.of(
				autoguard.api.Binary,
				autoguard.guards.Undefined
			)
		}),
		"listDomainRecords": autoguard.guards.Object.of({
			"options": autoguard.guards.Union.of(
				autoguard.guards.Intersection.of(
					autoguard.guards.Object.of({}),
					autoguard.api.Options
				),
				autoguard.guards.Undefined
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Intersection.of(
					autoguard.guards.Object.of({}),
					autoguard.api.Headers
				),
				autoguard.guards.Undefined
			),
			"payload": autoguard.guards.Object.of({
				"domainname": autoguard.guards.String
			})
		}),
		"createDomainRecord": autoguard.guards.Object.of({
			"options": autoguard.guards.Union.of(
				autoguard.guards.Intersection.of(
					autoguard.guards.Object.of({}),
					autoguard.api.Options
				),
				autoguard.guards.Undefined
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Intersection.of(
					autoguard.guards.Object.of({}),
					autoguard.api.Headers
				),
				autoguard.guards.Undefined
			),
			"payload": autoguard.guards.Object.of({
				"domainname": autoguard.guards.String,
				"host": autoguard.guards.Reference.of(() => DomainRecordHost),
				"type": autoguard.guards.Reference.of(() => DomainRecordType),
				"data": autoguard.guards.String,
				"ttl": autoguard.guards.Union.of(
					autoguard.guards.Number,
					autoguard.guards.Undefined
				)
			})
		}),
		"updateDomainRecord": autoguard.guards.Object.of({
			"options": autoguard.guards.Union.of(
				autoguard.guards.Intersection.of(
					autoguard.guards.Object.of({}),
					autoguard.api.Options
				),
				autoguard.guards.Undefined
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Intersection.of(
					autoguard.guards.Object.of({}),
					autoguard.api.Headers
				),
				autoguard.guards.Undefined
			),
			"payload": autoguard.guards.Object.of({
				"recordid": autoguard.guards.Number,
				"host": autoguard.guards.Union.of(
					autoguard.guards.Reference.of(() => DomainRecordHost),
					autoguard.guards.Undefined
				),
				"type": autoguard.guards.Union.of(
					autoguard.guards.Reference.of(() => DomainRecordType),
					autoguard.guards.Undefined
				),
				"data": autoguard.guards.Union.of(
					autoguard.guards.String,
					autoguard.guards.Undefined
				),
				"ttl": autoguard.guards.Union.of(
					autoguard.guards.Number,
					autoguard.guards.Undefined
				)
			})
		}),
		"deleteDomainRecord": autoguard.guards.Object.of({
			"options": autoguard.guards.Union.of(
				autoguard.guards.Intersection.of(
					autoguard.guards.Object.of({}),
					autoguard.api.Options
				),
				autoguard.guards.Undefined
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Intersection.of(
					autoguard.guards.Object.of({}),
					autoguard.api.Headers
				),
				autoguard.guards.Undefined
			),
			"payload": autoguard.guards.Object.of({
				"recordid": autoguard.guards.Number
			})
		})
	};

	export type Requests = { [A in keyof typeof Requests]: ReturnType<typeof Requests[A]["as"]>; };

	export const Responses = {
		"listDomains": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Number,
				autoguard.guards.Undefined
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Intersection.of(
					autoguard.guards.Object.of({}),
					autoguard.api.Headers
				),
				autoguard.guards.Undefined
			),
			"payload": autoguard.guards.Object.of({
				"response": autoguard.guards.Object.of({
					"status": autoguard.guards.Reference.of(() => Status),
					"domains": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Domain))
				})
			})
		}),
		"listDomainRecords": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Number,
				autoguard.guards.Undefined
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Intersection.of(
					autoguard.guards.Object.of({}),
					autoguard.api.Headers
				),
				autoguard.guards.Undefined
			),
			"payload": autoguard.guards.Object.of({
				"response": autoguard.guards.Object.of({
					"status": autoguard.guards.Reference.of(() => Status),
					"records": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => DomainRecord))
				})
			})
		}),
		"createDomainRecord": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Number,
				autoguard.guards.Undefined
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Intersection.of(
					autoguard.guards.Object.of({}),
					autoguard.api.Headers
				),
				autoguard.guards.Undefined
			),
			"payload": autoguard.guards.Object.of({
				"response": autoguard.guards.Object.of({
					"status": autoguard.guards.Reference.of(() => Status),
					"record": autoguard.guards.Reference.of(() => DomainRecord)
				})
			})
		}),
		"updateDomainRecord": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Number,
				autoguard.guards.Undefined
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Intersection.of(
					autoguard.guards.Object.of({}),
					autoguard.api.Headers
				),
				autoguard.guards.Undefined
			),
			"payload": autoguard.guards.Object.of({
				"response": autoguard.guards.Object.of({
					"status": autoguard.guards.Reference.of(() => Status),
					"record": autoguard.guards.Reference.of(() => DomainRecord)
				})
			})
		}),
		"deleteDomainRecord": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Number,
				autoguard.guards.Undefined
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Intersection.of(
					autoguard.guards.Object.of({}),
					autoguard.api.Headers
				),
				autoguard.guards.Undefined
			),
			"payload": autoguard.guards.Object.of({
				"response": autoguard.guards.Object.of({
					"status": autoguard.guards.Reference.of(() => Status)
				})
			})
		})
	};

	export type Responses = { [A in keyof typeof Responses]: ReturnType<typeof Responses[A]["as"]>; };
};
