// This file was auto-generated by @joelek/autoguard. Edit at own risk.

import * as autoguard from "@joelek/autoguard/dist/lib-shared";

export enum SignatureAlgorithm {
	"HS256" = 0,
	"HS384" = 1,
	"HS512" = 2,
	"RS256" = 3,
	"RS384" = 4,
	"RS512" = 5,
	"ES256" = 6,
	"ES384" = 7,
	"ES512" = 8,
	"PS256" = 9,
	"PS384" = 10,
	"PS512" = 11
};

export namespace SignatureAlgorithm {
	export const Entries = [
		{ key: "HS256", value: 0 },
		{ key: "HS384", value: 1 },
		{ key: "HS512", value: 2 },
		{ key: "RS256", value: 3 },
		{ key: "RS384", value: 4 },
		{ key: "RS512", value: 5 },
		{ key: "ES256", value: 6 },
		{ key: "ES384", value: 7 },
		{ key: "ES512", value: 8 },
		{ key: "PS256", value: 9 },
		{ key: "PS384", value: 10 },
		{ key: "PS512", value: 11 }
	] as const;

	export const Keys = autoguard.tables.createKeys(Entries);

	export const Values = autoguard.tables.createValues(Entries);

	export const KeyToValueMap = autoguard.tables.createKeyToValueMap(Entries);

	export const ValueToKeyMap = autoguard.tables.createValueToKeyMap(Entries);

	export type Key = typeof Keys[number];
	export const Key: autoguard.serialization.MessageGuard<Key> = autoguard.guards.Key.of(KeyToValueMap);

	export type Value = typeof Values[number];
	export const Value: autoguard.serialization.MessageGuard<Value> = autoguard.guards.Key.of(ValueToKeyMap);

	export function keyFromValue(value: number): Key {
		return ValueToKeyMap[Value.as(value)];
	};

	export function valueFromKey(key: string): Value {
		return KeyToValueMap[Key.as(key)];
	};
};

export const Protected: autoguard.serialization.MessageGuard<Protected> = autoguard.guards.Object.of({
	"alg": autoguard.guards.Reference.of(() => SignatureAlgorithm.Key)
}, {});

export type Protected = autoguard.guards.Object<{
	"alg": autoguard.guards.Reference<SignatureAlgorithm.Key>
}, {}>;

export const Body: autoguard.serialization.MessageGuard<Body> = autoguard.guards.Object.of({
	"protected": autoguard.guards.String,
	"payload": autoguard.guards.String,
	"signature": autoguard.guards.String
}, {});

export type Body = autoguard.guards.Object<{
	"protected": autoguard.guards.String,
	"payload": autoguard.guards.String,
	"signature": autoguard.guards.String
}, {}>;

export namespace Autoguard {
	export const Guards = {
		"Protected": autoguard.guards.Reference.of(() => Protected),
		"Body": autoguard.guards.Reference.of(() => Body)
	};

	export type Guards = { [A in keyof typeof Guards]: ReturnType<typeof Guards[A]["as"]>; };

	export const Requests = {};

	export type Requests = { [A in keyof typeof Requests]: ReturnType<typeof Requests[A]["as"]>; };

	export const Responses = {};

	export type Responses = { [A in keyof typeof Responses]: ReturnType<typeof Responses[A]["as"]>; };
};
