// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "@joelek/ts-autoguard/dist/lib-shared";

export const DomainPrice: autoguard.serialization.MessageGuard<DomainPrice> = autoguard.guards.Object.of({
	"amount": autoguard.guards.Number,
	"currency": autoguard.guards.String,
	"years": autoguard.guards.Number
}, {});

export type DomainPrice = autoguard.guards.Object<{
	"amount": autoguard.guards.Number,
	"currency": autoguard.guards.String,
	"years": autoguard.guards.Number
}, {}>;

export const RegistrarInfo: autoguard.serialization.MessageGuard<RegistrarInfo> = autoguard.guards.Object.of({
	"autorenew": autoguard.guards.String,
	"state": autoguard.guards.String
}, {
	"statedescription": autoguard.guards.String,
	"expire": autoguard.guards.String,
	"tld": autoguard.guards.String,
	"invoicenumber": autoguard.guards.String
});

export type RegistrarInfo = autoguard.guards.Object<{
	"autorenew": autoguard.guards.String,
	"state": autoguard.guards.String
}, {
	"statedescription": autoguard.guards.String,
	"expire": autoguard.guards.String,
	"tld": autoguard.guards.String,
	"invoicenumber": autoguard.guards.String
}>;

export const Domain: autoguard.serialization.MessageGuard<Domain> = autoguard.guards.Object.of({
	"domainname": autoguard.guards.String
}, {
	"available": autoguard.guards.Boolean,
	"createtime": autoguard.guards.String,
	"displayname": autoguard.guards.String,
	"expire": autoguard.guards.Number,
	"minimum": autoguard.guards.Number,
	"prices": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => DomainPrice)),
	"primarynameserver": autoguard.guards.String,
	"recordcount": autoguard.guards.Number,
	"refresh": autoguard.guards.Number,
	"registrarinfo": autoguard.guards.Reference.of(() => RegistrarInfo),
	"responsibleperson": autoguard.guards.String,
	"retry": autoguard.guards.Number,
	"ttl": autoguard.guards.Number,
	"usingglesysnameserver": autoguard.guards.String
});

export type Domain = autoguard.guards.Object<{
	"domainname": autoguard.guards.String
}, {
	"available": autoguard.guards.Boolean,
	"createtime": autoguard.guards.String,
	"displayname": autoguard.guards.String,
	"expire": autoguard.guards.Number,
	"minimum": autoguard.guards.Number,
	"prices": autoguard.guards.Array<autoguard.guards.Reference<DomainPrice>>,
	"primarynameserver": autoguard.guards.String,
	"recordcount": autoguard.guards.Number,
	"refresh": autoguard.guards.Number,
	"registrarinfo": autoguard.guards.Reference<RegistrarInfo>,
	"responsibleperson": autoguard.guards.String,
	"retry": autoguard.guards.Number,
	"ttl": autoguard.guards.Number,
	"usingglesysnameserver": autoguard.guards.String
}>;

export const DomainRecordHost: autoguard.serialization.MessageGuard<DomainRecordHost> = autoguard.guards.Union.of(
	autoguard.guards.StringLiteral.of("@"),
	autoguard.guards.String
);

export type DomainRecordHost = autoguard.guards.Union<[
	autoguard.guards.StringLiteral<"@">,
	autoguard.guards.String
]>;

export const DomainRecordType: autoguard.serialization.MessageGuard<DomainRecordType> = autoguard.guards.Union.of(
	autoguard.guards.StringLiteral.of("A"),
	autoguard.guards.StringLiteral.of("NS"),
	autoguard.guards.StringLiteral.of("MX"),
	autoguard.guards.StringLiteral.of("TXT"),
	autoguard.guards.String
);

export type DomainRecordType = autoguard.guards.Union<[
	autoguard.guards.StringLiteral<"A">,
	autoguard.guards.StringLiteral<"NS">,
	autoguard.guards.StringLiteral<"MX">,
	autoguard.guards.StringLiteral<"TXT">,
	autoguard.guards.String
]>;

export const DomainRecord: autoguard.serialization.MessageGuard<DomainRecord> = autoguard.guards.Object.of({
	"domainname": autoguard.guards.String,
	"data": autoguard.guards.String,
	"host": autoguard.guards.Reference.of(() => DomainRecordHost),
	"recordid": autoguard.guards.Number,
	"ttl": autoguard.guards.Number,
	"type": autoguard.guards.Reference.of(() => DomainRecordType)
}, {});

export type DomainRecord = autoguard.guards.Object<{
	"domainname": autoguard.guards.String,
	"data": autoguard.guards.String,
	"host": autoguard.guards.Reference<DomainRecordHost>,
	"recordid": autoguard.guards.Number,
	"ttl": autoguard.guards.Number,
	"type": autoguard.guards.Reference<DomainRecordType>
}, {}>;

export namespace Autoguard {
	export const Guards = {
		"DomainPrice": autoguard.guards.Reference.of(() => DomainPrice),
		"RegistrarInfo": autoguard.guards.Reference.of(() => RegistrarInfo),
		"Domain": autoguard.guards.Reference.of(() => Domain),
		"DomainRecordHost": autoguard.guards.Reference.of(() => DomainRecordHost),
		"DomainRecordType": autoguard.guards.Reference.of(() => DomainRecordType),
		"DomainRecord": autoguard.guards.Reference.of(() => DomainRecord)
	};

	export type Guards = { [A in keyof typeof Guards]: ReturnType<typeof Guards[A]["as"]>; };

	export const Requests = {
		"listDomains": autoguard.guards.Object.of({}, {
			"options": autoguard.guards.Intersection.of(
				autoguard.guards.Object.of({}, {}),
				autoguard.api.Options
			),
			"headers": autoguard.guards.Intersection.of(
				autoguard.guards.Object.of({}, {}),
				autoguard.api.Headers
			),
			"payload": autoguard.api.Binary
		}),
		"listDomainRecords": autoguard.guards.Object.of({
			"payload": autoguard.guards.Object.of({
				"domainname": autoguard.guards.String
			}, {})
		}, {
			"options": autoguard.guards.Intersection.of(
				autoguard.guards.Object.of({}, {}),
				autoguard.api.Options
			),
			"headers": autoguard.guards.Intersection.of(
				autoguard.guards.Object.of({}, {}),
				autoguard.api.Headers
			)
		}),
		"createDomainRecord": autoguard.guards.Object.of({
			"payload": autoguard.guards.Object.of({
				"domainname": autoguard.guards.String,
				"data": autoguard.guards.String,
				"host": autoguard.guards.Reference.of(() => DomainRecordHost),
				"type": autoguard.guards.Reference.of(() => DomainRecordType)
			}, {
				"ttl": autoguard.guards.Number
			})
		}, {
			"options": autoguard.guards.Intersection.of(
				autoguard.guards.Object.of({}, {}),
				autoguard.api.Options
			),
			"headers": autoguard.guards.Intersection.of(
				autoguard.guards.Object.of({}, {}),
				autoguard.api.Headers
			)
		}),
		"updateDomainRecord": autoguard.guards.Object.of({
			"payload": autoguard.guards.Object.of({
				"recordid": autoguard.guards.Number
			}, {
				"data": autoguard.guards.String,
				"host": autoguard.guards.Reference.of(() => DomainRecordHost),
				"type": autoguard.guards.Reference.of(() => DomainRecordType),
				"ttl": autoguard.guards.Number
			})
		}, {
			"options": autoguard.guards.Intersection.of(
				autoguard.guards.Object.of({}, {}),
				autoguard.api.Options
			),
			"headers": autoguard.guards.Intersection.of(
				autoguard.guards.Object.of({}, {}),
				autoguard.api.Headers
			)
		}),
		"deleteDomainRecord": autoguard.guards.Object.of({
			"payload": autoguard.guards.Object.of({
				"recordid": autoguard.guards.Number
			}, {})
		}, {
			"options": autoguard.guards.Intersection.of(
				autoguard.guards.Object.of({}, {}),
				autoguard.api.Options
			),
			"headers": autoguard.guards.Intersection.of(
				autoguard.guards.Object.of({}, {}),
				autoguard.api.Headers
			)
		})
	};

	export type Requests = { [A in keyof typeof Requests]: ReturnType<typeof Requests[A]["as"]>; };

	export const Responses = {
		"listDomains": autoguard.guards.Object.of({
			"payload": autoguard.guards.Object.of({
				"response": autoguard.guards.Object.of({
					"domains": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Domain))
				}, {})
			}, {})
		}, {
			"status": autoguard.guards.Number,
			"headers": autoguard.guards.Intersection.of(
				autoguard.guards.Object.of({}, {}),
				autoguard.api.Headers
			)
		}),
		"listDomainRecords": autoguard.guards.Object.of({
			"payload": autoguard.guards.Object.of({
				"response": autoguard.guards.Object.of({
					"records": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => DomainRecord))
				}, {})
			}, {})
		}, {
			"status": autoguard.guards.Number,
			"headers": autoguard.guards.Intersection.of(
				autoguard.guards.Object.of({}, {}),
				autoguard.api.Headers
			)
		}),
		"createDomainRecord": autoguard.guards.Object.of({
			"payload": autoguard.guards.Object.of({
				"response": autoguard.guards.Object.of({
					"record": autoguard.guards.Reference.of(() => DomainRecord)
				}, {})
			}, {})
		}, {
			"status": autoguard.guards.Number,
			"headers": autoguard.guards.Intersection.of(
				autoguard.guards.Object.of({}, {}),
				autoguard.api.Headers
			)
		}),
		"updateDomainRecord": autoguard.guards.Object.of({
			"payload": autoguard.guards.Object.of({
				"response": autoguard.guards.Object.of({
					"record": autoguard.guards.Reference.of(() => DomainRecord)
				}, {})
			}, {})
		}, {
			"status": autoguard.guards.Number,
			"headers": autoguard.guards.Intersection.of(
				autoguard.guards.Object.of({}, {}),
				autoguard.api.Headers
			)
		}),
		"deleteDomainRecord": autoguard.guards.Object.of({
			"payload": autoguard.guards.Object.of({
				"response": autoguard.guards.Object.of({}, {})
			}, {})
		}, {
			"status": autoguard.guards.Number,
			"headers": autoguard.guards.Intersection.of(
				autoguard.guards.Object.of({}, {}),
				autoguard.api.Headers
			)
		})
	};

	export type Responses = { [A in keyof typeof Responses]: ReturnType<typeof Responses[A]["as"]>; };
};
