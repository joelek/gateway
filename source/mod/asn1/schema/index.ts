// This file was auto-generated by @joelek/autoguard. Edit at own risk.

import * as autoguard from "@joelek/autoguard/dist/lib-shared";

export enum Kind {
	"UNIVERSAL" = 0,
	"APPLICATION" = 1,
	"CONTEXT" = 2,
	"PRIVATE" = 3
};

export namespace Kind {
	export const Entries = [
		{ key: "UNIVERSAL", value: 0 },
		{ key: "APPLICATION", value: 1 },
		{ key: "CONTEXT", value: 2 },
		{ key: "PRIVATE", value: 3 }
	] as const;

	export const Keys = autoguard.tables.createKeys(Entries);

	export const Values = autoguard.tables.createValues(Entries);

	export const KeyToValueMap = autoguard.tables.createKeyToValueMap(Entries);

	export const ValueToKeyMap = autoguard.tables.createValueToKeyMap(Entries);

	export type Key = typeof Keys[number];
	export const Key: autoguard.serialization.MessageGuard<Key> = autoguard.guards.Key.of(KeyToValueMap);

	export type Value = typeof Values[number];
	export const Value: autoguard.serialization.MessageGuard<Value> = autoguard.guards.Key.of(ValueToKeyMap);

	export function keyFromValue(value: number): Key {
		return ValueToKeyMap[Value.as(value)];
	};

	export function valueFromKey(key: string): Value {
		return KeyToValueMap[Key.as(key)];
	};
};

export enum Form {
	"PRIMITIVE" = 0,
	"CONSTRUCTED" = 1
};

export namespace Form {
	export const Entries = [
		{ key: "PRIMITIVE", value: 0 },
		{ key: "CONSTRUCTED", value: 1 }
	] as const;

	export const Keys = autoguard.tables.createKeys(Entries);

	export const Values = autoguard.tables.createValues(Entries);

	export const KeyToValueMap = autoguard.tables.createKeyToValueMap(Entries);

	export const ValueToKeyMap = autoguard.tables.createValueToKeyMap(Entries);

	export type Key = typeof Keys[number];
	export const Key: autoguard.serialization.MessageGuard<Key> = autoguard.guards.Key.of(KeyToValueMap);

	export type Value = typeof Values[number];
	export const Value: autoguard.serialization.MessageGuard<Value> = autoguard.guards.Key.of(ValueToKeyMap);

	export function keyFromValue(value: number): Key {
		return ValueToKeyMap[Value.as(value)];
	};

	export function valueFromKey(key: string): Value {
		return KeyToValueMap[Key.as(key)];
	};
};

export enum Type {
	"END_OF_CONTENT" = 0,
	"BOOLEAN" = 1,
	"INTEGER" = 2,
	"BIT_STRING" = 3,
	"OCTET_STRING" = 4,
	"NULL" = 5,
	"OBJECT_IDENTIFIER" = 6,
	"OBJECT_DESCRIPTOR" = 7,
	"EXTERNAL" = 8,
	"REAL" = 9,
	"ENUMERATED" = 10,
	"EMBEDDED_PDV" = 11,
	"UTF8_STRING" = 12,
	"RELATIVE_OID" = 13,
	"TIME" = 14,
	"0F_RESERVED" = 15,
	"SEQUENCE" = 16,
	"SET" = 17,
	"NUMERIC_STRING" = 18,
	"PRINTABLE_STRING" = 19,
	"T61_STRING" = 20,
	"VIDEOTEX_STRING" = 21,
	"IA5_STRING" = 22,
	"UTC_TIME" = 23,
	"GENERALIZED_TIME" = 24,
	"GRAPHIC_STRING" = 25,
	"VISIBLE_STRING" = 26,
	"GENERAL_STRING" = 27,
	"UNIVERSAL_STRING" = 28,
	"CHARACTER_STRING" = 29,
	"BMP_STRING" = 30,
	"DATE" = 31,
	"TIME_OF_DAY" = 32,
	"DATE_TIME" = 33,
	"DURATION" = 34,
	"OID_IRI" = 35,
	"RELATIVE_OID_IRI" = 36
};

export namespace Type {
	export const Entries = [
		{ key: "END_OF_CONTENT", value: 0 },
		{ key: "BOOLEAN", value: 1 },
		{ key: "INTEGER", value: 2 },
		{ key: "BIT_STRING", value: 3 },
		{ key: "OCTET_STRING", value: 4 },
		{ key: "NULL", value: 5 },
		{ key: "OBJECT_IDENTIFIER", value: 6 },
		{ key: "OBJECT_DESCRIPTOR", value: 7 },
		{ key: "EXTERNAL", value: 8 },
		{ key: "REAL", value: 9 },
		{ key: "ENUMERATED", value: 10 },
		{ key: "EMBEDDED_PDV", value: 11 },
		{ key: "UTF8_STRING", value: 12 },
		{ key: "RELATIVE_OID", value: 13 },
		{ key: "TIME", value: 14 },
		{ key: "0F_RESERVED", value: 15 },
		{ key: "SEQUENCE", value: 16 },
		{ key: "SET", value: 17 },
		{ key: "NUMERIC_STRING", value: 18 },
		{ key: "PRINTABLE_STRING", value: 19 },
		{ key: "T61_STRING", value: 20 },
		{ key: "VIDEOTEX_STRING", value: 21 },
		{ key: "IA5_STRING", value: 22 },
		{ key: "UTC_TIME", value: 23 },
		{ key: "GENERALIZED_TIME", value: 24 },
		{ key: "GRAPHIC_STRING", value: 25 },
		{ key: "VISIBLE_STRING", value: 26 },
		{ key: "GENERAL_STRING", value: 27 },
		{ key: "UNIVERSAL_STRING", value: 28 },
		{ key: "CHARACTER_STRING", value: 29 },
		{ key: "BMP_STRING", value: 30 },
		{ key: "DATE", value: 31 },
		{ key: "TIME_OF_DAY", value: 32 },
		{ key: "DATE_TIME", value: 33 },
		{ key: "DURATION", value: 34 },
		{ key: "OID_IRI", value: 35 },
		{ key: "RELATIVE_OID_IRI", value: 36 }
	] as const;

	export const Keys = autoguard.tables.createKeys(Entries);

	export const Values = autoguard.tables.createValues(Entries);

	export const KeyToValueMap = autoguard.tables.createKeyToValueMap(Entries);

	export const ValueToKeyMap = autoguard.tables.createValueToKeyMap(Entries);

	export type Key = typeof Keys[number];
	export const Key: autoguard.serialization.MessageGuard<Key> = autoguard.guards.Key.of(KeyToValueMap);

	export type Value = typeof Values[number];
	export const Value: autoguard.serialization.MessageGuard<Value> = autoguard.guards.Key.of(ValueToKeyMap);

	export function keyFromValue(value: number): Key {
		return ValueToKeyMap[Value.as(value)];
	};

	export function valueFromKey(key: string): Value {
		return KeyToValueMap[Key.as(key)];
	};
};

export const Node: autoguard.serialization.MessageGuard<Node> = autoguard.guards.Object.of({
	"kind": autoguard.guards.Reference.of(() => Kind.Key),
	"form": autoguard.guards.Reference.of(() => Form.Key),
	"type": autoguard.guards.Reference.of(() => Type.Key),
	"data": autoguard.guards.Union.of(
		autoguard.guards.String,
		autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Node))
	)
}, {});

export type Node = autoguard.guards.Object<{
	"kind": autoguard.guards.Reference<Kind.Key>,
	"form": autoguard.guards.Reference<Form.Key>,
	"type": autoguard.guards.Reference<Type.Key>,
	"data": autoguard.guards.Union<[
		autoguard.guards.String,
		autoguard.guards.Array<autoguard.guards.Reference<Node>>
	]>
}, {}>;

export const BitString: autoguard.serialization.MessageGuard<BitString> = autoguard.guards.Object.of({
	"kind": autoguard.guards.StringLiteral.of("UNIVERSAL"),
	"form": autoguard.guards.StringLiteral.of("PRIMITIVE"),
	"type": autoguard.guards.StringLiteral.of("BIT_STRING"),
	"data": autoguard.guards.String
}, {});

export type BitString = autoguard.guards.Object<{
	"kind": autoguard.guards.StringLiteral<"UNIVERSAL">,
	"form": autoguard.guards.StringLiteral<"PRIMITIVE">,
	"type": autoguard.guards.StringLiteral<"BIT_STRING">,
	"data": autoguard.guards.String
}, {}>;

export const Integer: autoguard.serialization.MessageGuard<Integer> = autoguard.guards.Object.of({
	"kind": autoguard.guards.StringLiteral.of("UNIVERSAL"),
	"form": autoguard.guards.StringLiteral.of("PRIMITIVE"),
	"type": autoguard.guards.StringLiteral.of("INTEGER"),
	"data": autoguard.guards.String
}, {});

export type Integer = autoguard.guards.Object<{
	"kind": autoguard.guards.StringLiteral<"UNIVERSAL">,
	"form": autoguard.guards.StringLiteral<"PRIMITIVE">,
	"type": autoguard.guards.StringLiteral<"INTEGER">,
	"data": autoguard.guards.String
}, {}>;

export const Null: autoguard.serialization.MessageGuard<Null> = autoguard.guards.Object.of({
	"kind": autoguard.guards.StringLiteral.of("UNIVERSAL"),
	"form": autoguard.guards.StringLiteral.of("PRIMITIVE"),
	"type": autoguard.guards.StringLiteral.of("NULL"),
	"data": autoguard.guards.String
}, {});

export type Null = autoguard.guards.Object<{
	"kind": autoguard.guards.StringLiteral<"UNIVERSAL">,
	"form": autoguard.guards.StringLiteral<"PRIMITIVE">,
	"type": autoguard.guards.StringLiteral<"NULL">,
	"data": autoguard.guards.String
}, {}>;

export const ObjectIdentifier: autoguard.serialization.MessageGuard<ObjectIdentifier> = autoguard.guards.Object.of({
	"kind": autoguard.guards.StringLiteral.of("UNIVERSAL"),
	"form": autoguard.guards.StringLiteral.of("PRIMITIVE"),
	"type": autoguard.guards.StringLiteral.of("OBJECT_IDENTIFIER"),
	"data": autoguard.guards.String
}, {});

export type ObjectIdentifier = autoguard.guards.Object<{
	"kind": autoguard.guards.StringLiteral<"UNIVERSAL">,
	"form": autoguard.guards.StringLiteral<"PRIMITIVE">,
	"type": autoguard.guards.StringLiteral<"OBJECT_IDENTIFIER">,
	"data": autoguard.guards.String
}, {}>;

export const OctetString: autoguard.serialization.MessageGuard<OctetString> = autoguard.guards.Object.of({
	"kind": autoguard.guards.StringLiteral.of("UNIVERSAL"),
	"form": autoguard.guards.StringLiteral.of("PRIMITIVE"),
	"type": autoguard.guards.StringLiteral.of("OCTET_STRING"),
	"data": autoguard.guards.String
}, {});

export type OctetString = autoguard.guards.Object<{
	"kind": autoguard.guards.StringLiteral<"UNIVERSAL">,
	"form": autoguard.guards.StringLiteral<"PRIMITIVE">,
	"type": autoguard.guards.StringLiteral<"OCTET_STRING">,
	"data": autoguard.guards.String
}, {}>;

export const Sequence: autoguard.serialization.MessageGuard<Sequence> = autoguard.guards.Object.of({
	"kind": autoguard.guards.StringLiteral.of("UNIVERSAL"),
	"form": autoguard.guards.StringLiteral.of("CONSTRUCTED"),
	"type": autoguard.guards.StringLiteral.of("SEQUENCE"),
	"data": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Node))
}, {});

export type Sequence = autoguard.guards.Object<{
	"kind": autoguard.guards.StringLiteral<"UNIVERSAL">,
	"form": autoguard.guards.StringLiteral<"CONSTRUCTED">,
	"type": autoguard.guards.StringLiteral<"SEQUENCE">,
	"data": autoguard.guards.Array<autoguard.guards.Reference<Node>>
}, {}>;

export const Set: autoguard.serialization.MessageGuard<Set> = autoguard.guards.Object.of({
	"kind": autoguard.guards.StringLiteral.of("UNIVERSAL"),
	"form": autoguard.guards.StringLiteral.of("CONSTRUCTED"),
	"type": autoguard.guards.StringLiteral.of("SET"),
	"data": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Node))
}, {});

export type Set = autoguard.guards.Object<{
	"kind": autoguard.guards.StringLiteral<"UNIVERSAL">,
	"form": autoguard.guards.StringLiteral<"CONSTRUCTED">,
	"type": autoguard.guards.StringLiteral<"SET">,
	"data": autoguard.guards.Array<autoguard.guards.Reference<Node>>
}, {}>;

export const UTF8String: autoguard.serialization.MessageGuard<UTF8String> = autoguard.guards.Object.of({
	"kind": autoguard.guards.StringLiteral.of("UNIVERSAL"),
	"form": autoguard.guards.StringLiteral.of("PRIMITIVE"),
	"type": autoguard.guards.StringLiteral.of("UTF8_STRING"),
	"data": autoguard.guards.String
}, {});

export type UTF8String = autoguard.guards.Object<{
	"kind": autoguard.guards.StringLiteral<"UNIVERSAL">,
	"form": autoguard.guards.StringLiteral<"PRIMITIVE">,
	"type": autoguard.guards.StringLiteral<"UTF8_STRING">,
	"data": autoguard.guards.String
}, {}>;

export const Date: autoguard.serialization.MessageGuard<Date> = autoguard.guards.Object.of({
	"kind": autoguard.guards.StringLiteral.of("UNIVERSAL"),
	"form": autoguard.guards.StringLiteral.of("PRIMITIVE"),
	"type": autoguard.guards.StringLiteral.of("DATE"),
	"data": autoguard.guards.String
}, {});

export type Date = autoguard.guards.Object<{
	"kind": autoguard.guards.StringLiteral<"UNIVERSAL">,
	"form": autoguard.guards.StringLiteral<"PRIMITIVE">,
	"type": autoguard.guards.StringLiteral<"DATE">,
	"data": autoguard.guards.String
}, {}>;

export const UTCTime: autoguard.serialization.MessageGuard<UTCTime> = autoguard.guards.Object.of({
	"kind": autoguard.guards.StringLiteral.of("UNIVERSAL"),
	"form": autoguard.guards.StringLiteral.of("PRIMITIVE"),
	"type": autoguard.guards.StringLiteral.of("UTC_TIME"),
	"data": autoguard.guards.String
}, {});

export type UTCTime = autoguard.guards.Object<{
	"kind": autoguard.guards.StringLiteral<"UNIVERSAL">,
	"form": autoguard.guards.StringLiteral<"PRIMITIVE">,
	"type": autoguard.guards.StringLiteral<"UTC_TIME">,
	"data": autoguard.guards.String
}, {}>;

export const Boolean: autoguard.serialization.MessageGuard<Boolean> = autoguard.guards.Object.of({
	"kind": autoguard.guards.StringLiteral.of("UNIVERSAL"),
	"form": autoguard.guards.StringLiteral.of("PRIMITIVE"),
	"type": autoguard.guards.StringLiteral.of("BOOLEAN"),
	"data": autoguard.guards.String
}, {});

export type Boolean = autoguard.guards.Object<{
	"kind": autoguard.guards.StringLiteral<"UNIVERSAL">,
	"form": autoguard.guards.StringLiteral<"PRIMITIVE">,
	"type": autoguard.guards.StringLiteral<"BOOLEAN">,
	"data": autoguard.guards.String
}, {}>;

export namespace Autoguard {
	export const Guards = {
		"Node": autoguard.guards.Reference.of(() => Node),
		"BitString": autoguard.guards.Reference.of(() => BitString),
		"Integer": autoguard.guards.Reference.of(() => Integer),
		"Null": autoguard.guards.Reference.of(() => Null),
		"ObjectIdentifier": autoguard.guards.Reference.of(() => ObjectIdentifier),
		"OctetString": autoguard.guards.Reference.of(() => OctetString),
		"Sequence": autoguard.guards.Reference.of(() => Sequence),
		"Set": autoguard.guards.Reference.of(() => Set),
		"UTF8String": autoguard.guards.Reference.of(() => UTF8String),
		"Date": autoguard.guards.Reference.of(() => Date),
		"UTCTime": autoguard.guards.Reference.of(() => UTCTime),
		"Boolean": autoguard.guards.Reference.of(() => Boolean)
	};

	export type Guards = { [A in keyof typeof Guards]: ReturnType<typeof Guards[A]["as"]>; };

	export const Requests = {};

	export type Requests = { [A in keyof typeof Requests]: ReturnType<typeof Requests[A]["as"]>; };

	export const Responses = {};

	export type Responses = { [A in keyof typeof Responses]: ReturnType<typeof Responses[A]["as"]>; };
};
