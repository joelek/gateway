"use strict";
// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeClient = void 0;
const autoguard = require("@joelek/ts-autoguard/dist/lib-client");
const shared = require("./index");
const makeClient = (clientOptions) => ({
    "listDomains": (request) => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c, _d, _e, _f, _g;
        let guard = shared.Autoguard.Requests["listDomains"];
        guard.as(request, "request");
        let method = "POST";
        let components = new Array();
        components.push("domain");
        components.push("list");
        let parameters = new Array();
        parameters.push(...autoguard.api.encodeUndeclaredParameterPairs((_a = request.options) !== null && _a !== void 0 ? _a : {}, [...[], ...parameters.map((parameter) => parameter[0])]));
        let headers = new Array();
        headers.push(...autoguard.api.encodeUndeclaredHeaderPairs((_b = request.headers) !== null && _b !== void 0 ? _b : {}, headers.map((header) => header[0])));
        let payload = (_c = request.payload) !== null && _c !== void 0 ? _c : [];
        let requestHandler = (_d = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.requestHandler) !== null && _d !== void 0 ? _d : autoguard.api.xhr;
        let defaultHeaders = (_f = (_e = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.defaultHeaders) === null || _e === void 0 ? void 0 : _e.slice()) !== null && _f !== void 0 ? _f : [];
        defaultHeaders.push(["Content-Type", "application/octet-stream"]);
        defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
        let raw = yield requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.urlPrefix);
        {
            let status = raw.status;
            let headers = {};
            headers = Object.assign(Object.assign({}, headers), autoguard.api.decodeUndeclaredHeaders((_g = raw.headers) !== null && _g !== void 0 ? _g : {}, Object.keys(headers)));
            let payload = yield autoguard.api.deserializePayload(raw.payload);
            let guard = shared.Autoguard.Responses["listDomains"];
            let response = guard.as({ status, headers, payload }, "response");
            return new autoguard.api.ServerResponse(response, false);
        }
    }),
    "listDomainRecords": (request) => __awaiter(void 0, void 0, void 0, function* () {
        var _h, _j, _k, _l, _m, _o;
        let guard = shared.Autoguard.Requests["listDomainRecords"];
        guard.as(request, "request");
        let method = "POST";
        let components = new Array();
        components.push("domain");
        components.push("listrecords");
        let parameters = new Array();
        parameters.push(...autoguard.api.encodeUndeclaredParameterPairs((_h = request.options) !== null && _h !== void 0 ? _h : {}, [...[], ...parameters.map((parameter) => parameter[0])]));
        let headers = new Array();
        headers.push(...autoguard.api.encodeUndeclaredHeaderPairs((_j = request.headers) !== null && _j !== void 0 ? _j : {}, headers.map((header) => header[0])));
        let payload = autoguard.api.serializePayload(request.payload);
        let requestHandler = (_k = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.requestHandler) !== null && _k !== void 0 ? _k : autoguard.api.xhr;
        let defaultHeaders = (_m = (_l = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.defaultHeaders) === null || _l === void 0 ? void 0 : _l.slice()) !== null && _m !== void 0 ? _m : [];
        defaultHeaders.push(["Content-Type", "application/json; charset=utf-8"]);
        defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
        let raw = yield requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.urlPrefix);
        {
            let status = raw.status;
            let headers = {};
            headers = Object.assign(Object.assign({}, headers), autoguard.api.decodeUndeclaredHeaders((_o = raw.headers) !== null && _o !== void 0 ? _o : {}, Object.keys(headers)));
            let payload = yield autoguard.api.deserializePayload(raw.payload);
            let guard = shared.Autoguard.Responses["listDomainRecords"];
            let response = guard.as({ status, headers, payload }, "response");
            return new autoguard.api.ServerResponse(response, false);
        }
    }),
    "createDomainRecord": (request) => __awaiter(void 0, void 0, void 0, function* () {
        var _p, _q, _r, _s, _t, _u;
        let guard = shared.Autoguard.Requests["createDomainRecord"];
        guard.as(request, "request");
        let method = "POST";
        let components = new Array();
        components.push("domain");
        components.push("addrecord");
        let parameters = new Array();
        parameters.push(...autoguard.api.encodeUndeclaredParameterPairs((_p = request.options) !== null && _p !== void 0 ? _p : {}, [...[], ...parameters.map((parameter) => parameter[0])]));
        let headers = new Array();
        headers.push(...autoguard.api.encodeUndeclaredHeaderPairs((_q = request.headers) !== null && _q !== void 0 ? _q : {}, headers.map((header) => header[0])));
        let payload = autoguard.api.serializePayload(request.payload);
        let requestHandler = (_r = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.requestHandler) !== null && _r !== void 0 ? _r : autoguard.api.xhr;
        let defaultHeaders = (_t = (_s = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.defaultHeaders) === null || _s === void 0 ? void 0 : _s.slice()) !== null && _t !== void 0 ? _t : [];
        defaultHeaders.push(["Content-Type", "application/json; charset=utf-8"]);
        defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
        let raw = yield requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.urlPrefix);
        {
            let status = raw.status;
            let headers = {};
            headers = Object.assign(Object.assign({}, headers), autoguard.api.decodeUndeclaredHeaders((_u = raw.headers) !== null && _u !== void 0 ? _u : {}, Object.keys(headers)));
            let payload = yield autoguard.api.deserializePayload(raw.payload);
            let guard = shared.Autoguard.Responses["createDomainRecord"];
            let response = guard.as({ status, headers, payload }, "response");
            return new autoguard.api.ServerResponse(response, false);
        }
    }),
    "updateDomainRecord": (request) => __awaiter(void 0, void 0, void 0, function* () {
        var _v, _w, _x, _y, _z, _0;
        let guard = shared.Autoguard.Requests["updateDomainRecord"];
        guard.as(request, "request");
        let method = "POST";
        let components = new Array();
        components.push("domain");
        components.push("updaterecord");
        let parameters = new Array();
        parameters.push(...autoguard.api.encodeUndeclaredParameterPairs((_v = request.options) !== null && _v !== void 0 ? _v : {}, [...[], ...parameters.map((parameter) => parameter[0])]));
        let headers = new Array();
        headers.push(...autoguard.api.encodeUndeclaredHeaderPairs((_w = request.headers) !== null && _w !== void 0 ? _w : {}, headers.map((header) => header[0])));
        let payload = autoguard.api.serializePayload(request.payload);
        let requestHandler = (_x = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.requestHandler) !== null && _x !== void 0 ? _x : autoguard.api.xhr;
        let defaultHeaders = (_z = (_y = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.defaultHeaders) === null || _y === void 0 ? void 0 : _y.slice()) !== null && _z !== void 0 ? _z : [];
        defaultHeaders.push(["Content-Type", "application/json; charset=utf-8"]);
        defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
        let raw = yield requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.urlPrefix);
        {
            let status = raw.status;
            let headers = {};
            headers = Object.assign(Object.assign({}, headers), autoguard.api.decodeUndeclaredHeaders((_0 = raw.headers) !== null && _0 !== void 0 ? _0 : {}, Object.keys(headers)));
            let payload = yield autoguard.api.deserializePayload(raw.payload);
            let guard = shared.Autoguard.Responses["updateDomainRecord"];
            let response = guard.as({ status, headers, payload }, "response");
            return new autoguard.api.ServerResponse(response, false);
        }
    }),
    "deleteDomainRecord": (request) => __awaiter(void 0, void 0, void 0, function* () {
        var _1, _2, _3, _4, _5, _6;
        let guard = shared.Autoguard.Requests["deleteDomainRecord"];
        guard.as(request, "request");
        let method = "POST";
        let components = new Array();
        components.push("domain");
        components.push("deleterecord");
        let parameters = new Array();
        parameters.push(...autoguard.api.encodeUndeclaredParameterPairs((_1 = request.options) !== null && _1 !== void 0 ? _1 : {}, [...[], ...parameters.map((parameter) => parameter[0])]));
        let headers = new Array();
        headers.push(...autoguard.api.encodeUndeclaredHeaderPairs((_2 = request.headers) !== null && _2 !== void 0 ? _2 : {}, headers.map((header) => header[0])));
        let payload = autoguard.api.serializePayload(request.payload);
        let requestHandler = (_3 = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.requestHandler) !== null && _3 !== void 0 ? _3 : autoguard.api.xhr;
        let defaultHeaders = (_5 = (_4 = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.defaultHeaders) === null || _4 === void 0 ? void 0 : _4.slice()) !== null && _5 !== void 0 ? _5 : [];
        defaultHeaders.push(["Content-Type", "application/json; charset=utf-8"]);
        defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
        let raw = yield requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.urlPrefix);
        {
            let status = raw.status;
            let headers = {};
            headers = Object.assign(Object.assign({}, headers), autoguard.api.decodeUndeclaredHeaders((_6 = raw.headers) !== null && _6 !== void 0 ? _6 : {}, Object.keys(headers)));
            let payload = yield autoguard.api.deserializePayload(raw.payload);
            let guard = shared.Autoguard.Responses["deleteDomainRecord"];
            let response = guard.as({ status, headers, payload }, "response");
            return new autoguard.api.ServerResponse(response, false);
        }
    }),
});
exports.makeClient = makeClient;
