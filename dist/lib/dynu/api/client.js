"use strict";
// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeClient = void 0;
const autoguard = require("@joelek/ts-autoguard/dist/lib-client");
const shared = require("./index");
const makeClient = (clientOptions) => ({
    "listDomains": (request) => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c, _d, _e, _f, _g;
        let guard = shared.Autoguard.Requests["listDomains"];
        guard.as(request, "request");
        let method = "GET";
        let components = new Array();
        components.push("dns");
        let parameters = new Array();
        parameters.push(...autoguard.api.encodeUndeclaredParameterPairs((_a = request.options) !== null && _a !== void 0 ? _a : {}, [...[], ...parameters.map((parameter) => parameter[0])]));
        let headers = new Array();
        headers.push(...autoguard.api.encodeUndeclaredHeaderPairs((_b = request.headers) !== null && _b !== void 0 ? _b : {}, headers.map((header) => header[0])));
        let payload = (_c = request.payload) !== null && _c !== void 0 ? _c : [];
        let requestHandler = (_d = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.requestHandler) !== null && _d !== void 0 ? _d : autoguard.api.xhr;
        let defaultHeaders = (_f = (_e = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.defaultHeaders) === null || _e === void 0 ? void 0 : _e.slice()) !== null && _f !== void 0 ? _f : [];
        defaultHeaders.push(["Content-Type", "application/octet-stream"]);
        defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
        let raw = yield requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.urlPrefix);
        {
            let status = raw.status;
            let headers = {};
            headers = Object.assign(Object.assign({}, headers), autoguard.api.decodeUndeclaredHeaders((_g = raw.headers) !== null && _g !== void 0 ? _g : {}, Object.keys(headers)));
            let payload = yield autoguard.api.deserializePayload(raw.payload);
            let guard = shared.Autoguard.Responses["listDomains"];
            let response = guard.as({ status, headers, payload }, "response");
            return new autoguard.api.ServerResponse(response, false);
        }
    }),
    "listDomainRecords": (request) => __awaiter(void 0, void 0, void 0, function* () {
        var _h, _j, _k, _l, _m, _o, _p, _q;
        let guard = shared.Autoguard.Requests["listDomainRecords"];
        guard.as(request, "request");
        let method = "GET";
        let components = new Array();
        components.push("dns");
        components.push(...autoguard.api.encodeComponents([(_h = request.options) === null || _h === void 0 ? void 0 : _h["domainid"]], false));
        components.push("record");
        let parameters = new Array();
        parameters.push(...autoguard.api.encodeUndeclaredParameterPairs((_j = request.options) !== null && _j !== void 0 ? _j : {}, [...["domainid"], ...parameters.map((parameter) => parameter[0])]));
        let headers = new Array();
        headers.push(...autoguard.api.encodeUndeclaredHeaderPairs((_k = request.headers) !== null && _k !== void 0 ? _k : {}, headers.map((header) => header[0])));
        let payload = (_l = request.payload) !== null && _l !== void 0 ? _l : [];
        let requestHandler = (_m = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.requestHandler) !== null && _m !== void 0 ? _m : autoguard.api.xhr;
        let defaultHeaders = (_p = (_o = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.defaultHeaders) === null || _o === void 0 ? void 0 : _o.slice()) !== null && _p !== void 0 ? _p : [];
        defaultHeaders.push(["Content-Type", "application/octet-stream"]);
        defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
        let raw = yield requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.urlPrefix);
        {
            let status = raw.status;
            let headers = {};
            headers = Object.assign(Object.assign({}, headers), autoguard.api.decodeUndeclaredHeaders((_q = raw.headers) !== null && _q !== void 0 ? _q : {}, Object.keys(headers)));
            let payload = yield autoguard.api.deserializePayload(raw.payload);
            let guard = shared.Autoguard.Responses["listDomainRecords"];
            let response = guard.as({ status, headers, payload }, "response");
            return new autoguard.api.ServerResponse(response, false);
        }
    }),
    "createDomainRecord": (request) => __awaiter(void 0, void 0, void 0, function* () {
        var _r, _s, _t, _u, _v, _w, _x;
        let guard = shared.Autoguard.Requests["createDomainRecord"];
        guard.as(request, "request");
        let method = "POST";
        let components = new Array();
        components.push("dns");
        components.push(...autoguard.api.encodeComponents([(_r = request.options) === null || _r === void 0 ? void 0 : _r["domainid"]], false));
        components.push("record");
        let parameters = new Array();
        parameters.push(...autoguard.api.encodeUndeclaredParameterPairs((_s = request.options) !== null && _s !== void 0 ? _s : {}, [...["domainid"], ...parameters.map((parameter) => parameter[0])]));
        let headers = new Array();
        headers.push(...autoguard.api.encodeUndeclaredHeaderPairs((_t = request.headers) !== null && _t !== void 0 ? _t : {}, headers.map((header) => header[0])));
        let payload = autoguard.api.serializePayload(request.payload);
        let requestHandler = (_u = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.requestHandler) !== null && _u !== void 0 ? _u : autoguard.api.xhr;
        let defaultHeaders = (_w = (_v = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.defaultHeaders) === null || _v === void 0 ? void 0 : _v.slice()) !== null && _w !== void 0 ? _w : [];
        defaultHeaders.push(["Content-Type", "application/json; charset=utf-8"]);
        defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
        let raw = yield requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.urlPrefix);
        {
            let status = raw.status;
            let headers = {};
            headers = Object.assign(Object.assign({}, headers), autoguard.api.decodeUndeclaredHeaders((_x = raw.headers) !== null && _x !== void 0 ? _x : {}, Object.keys(headers)));
            let payload = yield autoguard.api.deserializePayload(raw.payload);
            let guard = shared.Autoguard.Responses["createDomainRecord"];
            let response = guard.as({ status, headers, payload }, "response");
            return new autoguard.api.ServerResponse(response, false);
        }
    }),
    "updateDomainRecord": (request) => __awaiter(void 0, void 0, void 0, function* () {
        var _y, _z, _0, _1, _2, _3, _4, _5;
        let guard = shared.Autoguard.Requests["updateDomainRecord"];
        guard.as(request, "request");
        let method = "POST";
        let components = new Array();
        components.push("dns");
        components.push(...autoguard.api.encodeComponents([(_y = request.options) === null || _y === void 0 ? void 0 : _y["domainid"]], false));
        components.push("record");
        components.push(...autoguard.api.encodeComponents([(_z = request.options) === null || _z === void 0 ? void 0 : _z["recordid"]], false));
        let parameters = new Array();
        parameters.push(...autoguard.api.encodeUndeclaredParameterPairs((_0 = request.options) !== null && _0 !== void 0 ? _0 : {}, [...["domainid", "recordid"], ...parameters.map((parameter) => parameter[0])]));
        let headers = new Array();
        headers.push(...autoguard.api.encodeUndeclaredHeaderPairs((_1 = request.headers) !== null && _1 !== void 0 ? _1 : {}, headers.map((header) => header[0])));
        let payload = autoguard.api.serializePayload(request.payload);
        let requestHandler = (_2 = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.requestHandler) !== null && _2 !== void 0 ? _2 : autoguard.api.xhr;
        let defaultHeaders = (_4 = (_3 = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.defaultHeaders) === null || _3 === void 0 ? void 0 : _3.slice()) !== null && _4 !== void 0 ? _4 : [];
        defaultHeaders.push(["Content-Type", "application/json; charset=utf-8"]);
        defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
        let raw = yield requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.urlPrefix);
        {
            let status = raw.status;
            let headers = {};
            headers = Object.assign(Object.assign({}, headers), autoguard.api.decodeUndeclaredHeaders((_5 = raw.headers) !== null && _5 !== void 0 ? _5 : {}, Object.keys(headers)));
            let payload = yield autoguard.api.deserializePayload(raw.payload);
            let guard = shared.Autoguard.Responses["updateDomainRecord"];
            let response = guard.as({ status, headers, payload }, "response");
            return new autoguard.api.ServerResponse(response, false);
        }
    }),
    "deleteDomainRecord": (request) => __awaiter(void 0, void 0, void 0, function* () {
        var _6, _7, _8, _9, _10, _11, _12, _13, _14;
        let guard = shared.Autoguard.Requests["deleteDomainRecord"];
        guard.as(request, "request");
        let method = "DELETE";
        let components = new Array();
        components.push("dns");
        components.push(...autoguard.api.encodeComponents([(_6 = request.options) === null || _6 === void 0 ? void 0 : _6["domainid"]], false));
        components.push("record");
        components.push(...autoguard.api.encodeComponents([(_7 = request.options) === null || _7 === void 0 ? void 0 : _7["recordid"]], false));
        let parameters = new Array();
        parameters.push(...autoguard.api.encodeUndeclaredParameterPairs((_8 = request.options) !== null && _8 !== void 0 ? _8 : {}, [...["domainid", "recordid"], ...parameters.map((parameter) => parameter[0])]));
        let headers = new Array();
        headers.push(...autoguard.api.encodeUndeclaredHeaderPairs((_9 = request.headers) !== null && _9 !== void 0 ? _9 : {}, headers.map((header) => header[0])));
        let payload = (_10 = request.payload) !== null && _10 !== void 0 ? _10 : [];
        let requestHandler = (_11 = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.requestHandler) !== null && _11 !== void 0 ? _11 : autoguard.api.xhr;
        let defaultHeaders = (_13 = (_12 = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.defaultHeaders) === null || _12 === void 0 ? void 0 : _12.slice()) !== null && _13 !== void 0 ? _13 : [];
        defaultHeaders.push(["Content-Type", "application/octet-stream"]);
        defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
        let raw = yield requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.urlPrefix);
        {
            let status = raw.status;
            let headers = {};
            headers = Object.assign(Object.assign({}, headers), autoguard.api.decodeUndeclaredHeaders((_14 = raw.headers) !== null && _14 !== void 0 ? _14 : {}, Object.keys(headers)));
            let payload = yield autoguard.api.deserializePayload(raw.payload);
            let guard = shared.Autoguard.Responses["deleteDomainRecord"];
            let response = guard.as({ status, headers, payload }, "response");
            return new autoguard.api.ServerResponse(response, false);
        }
    }),
});
exports.makeClient = makeClient;
