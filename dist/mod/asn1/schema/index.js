"use strict";
// This file was auto-generated by @joelek/autoguard. Edit at own risk.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Autoguard = exports.Boolean = exports.UTCTime = exports.Date = exports.UTF8String = exports.Set = exports.Sequence = exports.OctetString = exports.ObjectIdentifier = exports.Null = exports.Integer = exports.BitString = exports.Node = exports.Type = exports.Form = exports.Kind = void 0;
const autoguard = require("@joelek/autoguard/dist/lib-shared");
var Kind;
(function (Kind) {
    Kind[Kind["UNIVERSAL"] = 0] = "UNIVERSAL";
    Kind[Kind["APPLICATION"] = 1] = "APPLICATION";
    Kind[Kind["CONTEXT"] = 2] = "CONTEXT";
    Kind[Kind["PRIVATE"] = 3] = "PRIVATE";
})(Kind = exports.Kind || (exports.Kind = {}));
;
(function (Kind) {
    Kind.Entries = [
        { key: "UNIVERSAL", value: 0 },
        { key: "APPLICATION", value: 1 },
        { key: "CONTEXT", value: 2 },
        { key: "PRIVATE", value: 3 }
    ];
    Kind.Keys = autoguard.tables.createKeys(Kind.Entries);
    Kind.Values = autoguard.tables.createValues(Kind.Entries);
    Kind.KeyToValueMap = autoguard.tables.createKeyToValueMap(Kind.Entries);
    Kind.ValueToKeyMap = autoguard.tables.createValueToKeyMap(Kind.Entries);
    Kind.Key = autoguard.guards.Key.of(Kind.KeyToValueMap);
    Kind.Value = autoguard.guards.Key.of(Kind.ValueToKeyMap);
    function keyFromValue(value) {
        return Kind.ValueToKeyMap[Kind.Value.as(value)];
    }
    Kind.keyFromValue = keyFromValue;
    ;
    function valueFromKey(key) {
        return Kind.KeyToValueMap[Kind.Key.as(key)];
    }
    Kind.valueFromKey = valueFromKey;
    ;
})(Kind = exports.Kind || (exports.Kind = {}));
;
var Form;
(function (Form) {
    Form[Form["PRIMITIVE"] = 0] = "PRIMITIVE";
    Form[Form["CONSTRUCTED"] = 1] = "CONSTRUCTED";
})(Form = exports.Form || (exports.Form = {}));
;
(function (Form) {
    Form.Entries = [
        { key: "PRIMITIVE", value: 0 },
        { key: "CONSTRUCTED", value: 1 }
    ];
    Form.Keys = autoguard.tables.createKeys(Form.Entries);
    Form.Values = autoguard.tables.createValues(Form.Entries);
    Form.KeyToValueMap = autoguard.tables.createKeyToValueMap(Form.Entries);
    Form.ValueToKeyMap = autoguard.tables.createValueToKeyMap(Form.Entries);
    Form.Key = autoguard.guards.Key.of(Form.KeyToValueMap);
    Form.Value = autoguard.guards.Key.of(Form.ValueToKeyMap);
    function keyFromValue(value) {
        return Form.ValueToKeyMap[Form.Value.as(value)];
    }
    Form.keyFromValue = keyFromValue;
    ;
    function valueFromKey(key) {
        return Form.KeyToValueMap[Form.Key.as(key)];
    }
    Form.valueFromKey = valueFromKey;
    ;
})(Form = exports.Form || (exports.Form = {}));
;
var Type;
(function (Type) {
    Type[Type["END_OF_CONTENT"] = 0] = "END_OF_CONTENT";
    Type[Type["BOOLEAN"] = 1] = "BOOLEAN";
    Type[Type["INTEGER"] = 2] = "INTEGER";
    Type[Type["BIT_STRING"] = 3] = "BIT_STRING";
    Type[Type["OCTET_STRING"] = 4] = "OCTET_STRING";
    Type[Type["NULL"] = 5] = "NULL";
    Type[Type["OBJECT_IDENTIFIER"] = 6] = "OBJECT_IDENTIFIER";
    Type[Type["OBJECT_DESCRIPTOR"] = 7] = "OBJECT_DESCRIPTOR";
    Type[Type["EXTERNAL"] = 8] = "EXTERNAL";
    Type[Type["REAL"] = 9] = "REAL";
    Type[Type["ENUMERATED"] = 10] = "ENUMERATED";
    Type[Type["EMBEDDED_PDV"] = 11] = "EMBEDDED_PDV";
    Type[Type["UTF8_STRING"] = 12] = "UTF8_STRING";
    Type[Type["RELATIVE_OID"] = 13] = "RELATIVE_OID";
    Type[Type["TIME"] = 14] = "TIME";
    Type[Type["0F_RESERVED"] = 15] = "0F_RESERVED";
    Type[Type["SEQUENCE"] = 16] = "SEQUENCE";
    Type[Type["SET"] = 17] = "SET";
    Type[Type["NUMERIC_STRING"] = 18] = "NUMERIC_STRING";
    Type[Type["PRINTABLE_STRING"] = 19] = "PRINTABLE_STRING";
    Type[Type["T61_STRING"] = 20] = "T61_STRING";
    Type[Type["VIDEOTEX_STRING"] = 21] = "VIDEOTEX_STRING";
    Type[Type["IA5_STRING"] = 22] = "IA5_STRING";
    Type[Type["UTC_TIME"] = 23] = "UTC_TIME";
    Type[Type["GENERALIZED_TIME"] = 24] = "GENERALIZED_TIME";
    Type[Type["GRAPHIC_STRING"] = 25] = "GRAPHIC_STRING";
    Type[Type["VISIBLE_STRING"] = 26] = "VISIBLE_STRING";
    Type[Type["GENERAL_STRING"] = 27] = "GENERAL_STRING";
    Type[Type["UNIVERSAL_STRING"] = 28] = "UNIVERSAL_STRING";
    Type[Type["CHARACTER_STRING"] = 29] = "CHARACTER_STRING";
    Type[Type["BMP_STRING"] = 30] = "BMP_STRING";
    Type[Type["DATE"] = 31] = "DATE";
    Type[Type["TIME_OF_DAY"] = 32] = "TIME_OF_DAY";
    Type[Type["DATE_TIME"] = 33] = "DATE_TIME";
    Type[Type["DURATION"] = 34] = "DURATION";
    Type[Type["OID_IRI"] = 35] = "OID_IRI";
    Type[Type["RELATIVE_OID_IRI"] = 36] = "RELATIVE_OID_IRI";
})(Type = exports.Type || (exports.Type = {}));
;
(function (Type) {
    Type.Entries = [
        { key: "END_OF_CONTENT", value: 0 },
        { key: "BOOLEAN", value: 1 },
        { key: "INTEGER", value: 2 },
        { key: "BIT_STRING", value: 3 },
        { key: "OCTET_STRING", value: 4 },
        { key: "NULL", value: 5 },
        { key: "OBJECT_IDENTIFIER", value: 6 },
        { key: "OBJECT_DESCRIPTOR", value: 7 },
        { key: "EXTERNAL", value: 8 },
        { key: "REAL", value: 9 },
        { key: "ENUMERATED", value: 10 },
        { key: "EMBEDDED_PDV", value: 11 },
        { key: "UTF8_STRING", value: 12 },
        { key: "RELATIVE_OID", value: 13 },
        { key: "TIME", value: 14 },
        { key: "0F_RESERVED", value: 15 },
        { key: "SEQUENCE", value: 16 },
        { key: "SET", value: 17 },
        { key: "NUMERIC_STRING", value: 18 },
        { key: "PRINTABLE_STRING", value: 19 },
        { key: "T61_STRING", value: 20 },
        { key: "VIDEOTEX_STRING", value: 21 },
        { key: "IA5_STRING", value: 22 },
        { key: "UTC_TIME", value: 23 },
        { key: "GENERALIZED_TIME", value: 24 },
        { key: "GRAPHIC_STRING", value: 25 },
        { key: "VISIBLE_STRING", value: 26 },
        { key: "GENERAL_STRING", value: 27 },
        { key: "UNIVERSAL_STRING", value: 28 },
        { key: "CHARACTER_STRING", value: 29 },
        { key: "BMP_STRING", value: 30 },
        { key: "DATE", value: 31 },
        { key: "TIME_OF_DAY", value: 32 },
        { key: "DATE_TIME", value: 33 },
        { key: "DURATION", value: 34 },
        { key: "OID_IRI", value: 35 },
        { key: "RELATIVE_OID_IRI", value: 36 }
    ];
    Type.Keys = autoguard.tables.createKeys(Type.Entries);
    Type.Values = autoguard.tables.createValues(Type.Entries);
    Type.KeyToValueMap = autoguard.tables.createKeyToValueMap(Type.Entries);
    Type.ValueToKeyMap = autoguard.tables.createValueToKeyMap(Type.Entries);
    Type.Key = autoguard.guards.Key.of(Type.KeyToValueMap);
    Type.Value = autoguard.guards.Key.of(Type.ValueToKeyMap);
    function keyFromValue(value) {
        return Type.ValueToKeyMap[Type.Value.as(value)];
    }
    Type.keyFromValue = keyFromValue;
    ;
    function valueFromKey(key) {
        return Type.KeyToValueMap[Type.Key.as(key)];
    }
    Type.valueFromKey = valueFromKey;
    ;
})(Type = exports.Type || (exports.Type = {}));
;
exports.Node = autoguard.guards.Object.of({
    "kind": autoguard.guards.Reference.of(() => Kind.Key),
    "form": autoguard.guards.Reference.of(() => Form.Key),
    "type": autoguard.guards.Reference.of(() => Type.Key),
    "data": autoguard.guards.Union.of(autoguard.guards.String, autoguard.guards.Array.of(autoguard.guards.Reference.of(() => exports.Node)))
}, {});
exports.BitString = autoguard.guards.Object.of({
    "kind": autoguard.guards.StringLiteral.of("UNIVERSAL"),
    "form": autoguard.guards.StringLiteral.of("PRIMITIVE"),
    "type": autoguard.guards.StringLiteral.of("BIT_STRING"),
    "data": autoguard.guards.String
}, {});
exports.Integer = autoguard.guards.Object.of({
    "kind": autoguard.guards.StringLiteral.of("UNIVERSAL"),
    "form": autoguard.guards.StringLiteral.of("PRIMITIVE"),
    "type": autoguard.guards.StringLiteral.of("INTEGER"),
    "data": autoguard.guards.String
}, {});
exports.Null = autoguard.guards.Object.of({
    "kind": autoguard.guards.StringLiteral.of("UNIVERSAL"),
    "form": autoguard.guards.StringLiteral.of("PRIMITIVE"),
    "type": autoguard.guards.StringLiteral.of("NULL"),
    "data": autoguard.guards.String
}, {});
exports.ObjectIdentifier = autoguard.guards.Object.of({
    "kind": autoguard.guards.StringLiteral.of("UNIVERSAL"),
    "form": autoguard.guards.StringLiteral.of("PRIMITIVE"),
    "type": autoguard.guards.StringLiteral.of("OBJECT_IDENTIFIER"),
    "data": autoguard.guards.String
}, {});
exports.OctetString = autoguard.guards.Object.of({
    "kind": autoguard.guards.StringLiteral.of("UNIVERSAL"),
    "form": autoguard.guards.StringLiteral.of("PRIMITIVE"),
    "type": autoguard.guards.StringLiteral.of("OCTET_STRING"),
    "data": autoguard.guards.String
}, {});
exports.Sequence = autoguard.guards.Object.of({
    "kind": autoguard.guards.StringLiteral.of("UNIVERSAL"),
    "form": autoguard.guards.StringLiteral.of("CONSTRUCTED"),
    "type": autoguard.guards.StringLiteral.of("SEQUENCE"),
    "data": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => exports.Node))
}, {});
exports.Set = autoguard.guards.Object.of({
    "kind": autoguard.guards.StringLiteral.of("UNIVERSAL"),
    "form": autoguard.guards.StringLiteral.of("CONSTRUCTED"),
    "type": autoguard.guards.StringLiteral.of("SET"),
    "data": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => exports.Node))
}, {});
exports.UTF8String = autoguard.guards.Object.of({
    "kind": autoguard.guards.StringLiteral.of("UNIVERSAL"),
    "form": autoguard.guards.StringLiteral.of("PRIMITIVE"),
    "type": autoguard.guards.StringLiteral.of("UTF8_STRING"),
    "data": autoguard.guards.String
}, {});
exports.Date = autoguard.guards.Object.of({
    "kind": autoguard.guards.StringLiteral.of("UNIVERSAL"),
    "form": autoguard.guards.StringLiteral.of("PRIMITIVE"),
    "type": autoguard.guards.StringLiteral.of("DATE"),
    "data": autoguard.guards.String
}, {});
exports.UTCTime = autoguard.guards.Object.of({
    "kind": autoguard.guards.StringLiteral.of("UNIVERSAL"),
    "form": autoguard.guards.StringLiteral.of("PRIMITIVE"),
    "type": autoguard.guards.StringLiteral.of("UTC_TIME"),
    "data": autoguard.guards.String
}, {});
exports.Boolean = autoguard.guards.Object.of({
    "kind": autoguard.guards.StringLiteral.of("UNIVERSAL"),
    "form": autoguard.guards.StringLiteral.of("PRIMITIVE"),
    "type": autoguard.guards.StringLiteral.of("BOOLEAN"),
    "data": autoguard.guards.String
}, {});
var Autoguard;
(function (Autoguard) {
    Autoguard.Guards = {
        "Node": autoguard.guards.Reference.of(() => exports.Node),
        "BitString": autoguard.guards.Reference.of(() => exports.BitString),
        "Integer": autoguard.guards.Reference.of(() => exports.Integer),
        "Null": autoguard.guards.Reference.of(() => exports.Null),
        "ObjectIdentifier": autoguard.guards.Reference.of(() => exports.ObjectIdentifier),
        "OctetString": autoguard.guards.Reference.of(() => exports.OctetString),
        "Sequence": autoguard.guards.Reference.of(() => exports.Sequence),
        "Set": autoguard.guards.Reference.of(() => exports.Set),
        "UTF8String": autoguard.guards.Reference.of(() => exports.UTF8String),
        "Date": autoguard.guards.Reference.of(() => exports.Date),
        "UTCTime": autoguard.guards.Reference.of(() => exports.UTCTime),
        "Boolean": autoguard.guards.Reference.of(() => exports.Boolean)
    };
    Autoguard.Requests = {};
    Autoguard.Responses = {};
})(Autoguard = exports.Autoguard || (exports.Autoguard = {}));
;
