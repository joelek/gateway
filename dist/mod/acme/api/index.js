"use strict";
// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Autoguard = exports.FinalizeOrderPayload = exports.CreateOrderPayload = exports.CreateAccountPayload = exports.ProtectedWithKID = exports.ProtectedWithJWK = exports.Protected = exports.Order = exports.Identifier = exports.Directory = exports.ChallengeTLSALPN01 = exports.ChallengeDNS01 = exports.ChallengeHTTP01 = exports.Challenge = exports.Authorization = exports.Account = void 0;
const autoguard = require("@joelek/ts-autoguard/dist/lib-shared");
const jwk_1 = require("../../jwk");
const jws_1 = require("../../jws");
exports.Account = autoguard.guards.Object.of({
    "status": autoguard.guards.Union.of(autoguard.guards.StringLiteral.of("valid"), autoguard.guards.StringLiteral.of("deactivated"), autoguard.guards.StringLiteral.of("revoked"))
}, {
    "contact": autoguard.guards.Array.of(autoguard.guards.String),
    "externalAccountBinding": autoguard.guards.Object.of({}, {}),
    "orders": autoguard.guards.String,
    "termsOfServiceAgreed": autoguard.guards.Boolean
});
exports.Authorization = autoguard.guards.Object.of({
    "identifier": autoguard.guards.Reference.of(() => exports.Identifier),
    "status": autoguard.guards.Union.of(autoguard.guards.StringLiteral.of("pending"), autoguard.guards.StringLiteral.of("valid"), autoguard.guards.StringLiteral.of("invalid"), autoguard.guards.StringLiteral.of("deactivated"), autoguard.guards.StringLiteral.of("expired"), autoguard.guards.StringLiteral.of("revoked")),
    "challenges": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => exports.Challenge))
}, {
    "expires": autoguard.guards.String,
    "wildcard": autoguard.guards.Boolean
});
exports.Challenge = autoguard.guards.Object.of({
    "status": autoguard.guards.Union.of(autoguard.guards.StringLiteral.of("pending"), autoguard.guards.StringLiteral.of("processing"), autoguard.guards.StringLiteral.of("valid"), autoguard.guards.StringLiteral.of("invalid")),
    "type": autoguard.guards.String,
    "url": autoguard.guards.String
}, {
    "error": autoguard.guards.Object.of({}, {}),
    "validated": autoguard.guards.String
});
exports.ChallengeHTTP01 = autoguard.guards.Intersection.of(autoguard.guards.Reference.of(() => exports.Challenge), autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("http-01"),
    "token": autoguard.guards.String
}, {}));
exports.ChallengeDNS01 = autoguard.guards.Intersection.of(autoguard.guards.Reference.of(() => exports.Challenge), autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("dns-01"),
    "token": autoguard.guards.String
}, {}));
exports.ChallengeTLSALPN01 = autoguard.guards.Intersection.of(autoguard.guards.Reference.of(() => exports.Challenge), autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("tls-alpn-01"),
    "token": autoguard.guards.String
}, {}));
exports.Directory = autoguard.guards.Object.of({
    "keyChange": autoguard.guards.String,
    "newAccount": autoguard.guards.String,
    "newNonce": autoguard.guards.String,
    "newOrder": autoguard.guards.String,
    "revokeCert": autoguard.guards.String
}, {
    "meta": autoguard.guards.Object.of({}, {
        "caaIdentities": autoguard.guards.Array.of(autoguard.guards.String),
        "externalAccountRequired": autoguard.guards.Boolean,
        "termsOfService": autoguard.guards.String,
        "website": autoguard.guards.String
    }),
    "newAuthz": autoguard.guards.String
});
exports.Identifier = autoguard.guards.Object.of({
    "type": autoguard.guards.StringLiteral.of("dns"),
    "value": autoguard.guards.String
}, {});
exports.Order = autoguard.guards.Object.of({
    "authorizations": autoguard.guards.Array.of(autoguard.guards.String),
    "finalize": autoguard.guards.String,
    "identifiers": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => exports.Identifier)),
    "status": autoguard.guards.Union.of(autoguard.guards.StringLiteral.of("pending"), autoguard.guards.StringLiteral.of("ready"), autoguard.guards.StringLiteral.of("processing"), autoguard.guards.StringLiteral.of("valid"), autoguard.guards.StringLiteral.of("invalid"))
}, {
    "certificate": autoguard.guards.String,
    "error": autoguard.guards.Object.of({}, {}),
    "expires": autoguard.guards.String,
    "notBefore": autoguard.guards.String,
    "notAfter": autoguard.guards.String
});
exports.Protected = autoguard.guards.Object.of({
    "nonce": autoguard.guards.String,
    "url": autoguard.guards.String
}, {});
exports.ProtectedWithJWK = autoguard.guards.Intersection.of(autoguard.guards.Reference.of(() => exports.Protected), autoguard.guards.Object.of({
    "jwk": autoguard.guards.Reference.of(() => jwk_1.AssymetricKey)
}, {}));
exports.ProtectedWithKID = autoguard.guards.Intersection.of(autoguard.guards.Reference.of(() => exports.Protected), autoguard.guards.Object.of({
    "kid": autoguard.guards.String
}, {}));
exports.CreateAccountPayload = autoguard.guards.Object.of({}, {
    "contact": autoguard.guards.Array.of(autoguard.guards.String),
    "termsOfServiceAgreed": autoguard.guards.Boolean,
    "onlyReturnExisting": autoguard.guards.Boolean,
    "externalAccountBinding": autoguard.guards.Object.of({}, {})
});
exports.CreateOrderPayload = autoguard.guards.Object.of({
    "identifiers": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => exports.Identifier))
}, {
    "notBefore": autoguard.guards.String,
    "notAfter": autoguard.guards.String
});
exports.FinalizeOrderPayload = autoguard.guards.Object.of({
    "csr": autoguard.guards.String
}, {});
var Autoguard;
(function (Autoguard) {
    Autoguard.Guards = {
        "Account": autoguard.guards.Reference.of(() => exports.Account),
        "Authorization": autoguard.guards.Reference.of(() => exports.Authorization),
        "Challenge": autoguard.guards.Reference.of(() => exports.Challenge),
        "ChallengeHTTP01": autoguard.guards.Reference.of(() => exports.ChallengeHTTP01),
        "ChallengeDNS01": autoguard.guards.Reference.of(() => exports.ChallengeDNS01),
        "ChallengeTLSALPN01": autoguard.guards.Reference.of(() => exports.ChallengeTLSALPN01),
        "Directory": autoguard.guards.Reference.of(() => exports.Directory),
        "Identifier": autoguard.guards.Reference.of(() => exports.Identifier),
        "Order": autoguard.guards.Reference.of(() => exports.Order),
        "Protected": autoguard.guards.Reference.of(() => exports.Protected),
        "ProtectedWithJWK": autoguard.guards.Reference.of(() => exports.ProtectedWithJWK),
        "ProtectedWithKID": autoguard.guards.Reference.of(() => exports.ProtectedWithKID),
        "CreateAccountPayload": autoguard.guards.Reference.of(() => exports.CreateAccountPayload),
        "CreateOrderPayload": autoguard.guards.Reference.of(() => exports.CreateOrderPayload),
        "FinalizeOrderPayload": autoguard.guards.Reference.of(() => exports.FinalizeOrderPayload)
    };
    Autoguard.Requests = {
        "downloadCertificate": autoguard.guards.Object.of({
            "headers": autoguard.guards.Intersection.of(autoguard.guards.Object.of({
                "content-type": autoguard.guards.String
            }, {}), autoguard.api.Headers),
            "payload": autoguard.guards.Reference.of(() => jws_1.Body)
        }, {
            "options": autoguard.guards.Intersection.of(autoguard.guards.Object.of({}, {
                "path": autoguard.guards.Array.of(autoguard.guards.String)
            }), autoguard.api.Options)
        }),
        "finalizeChallenge": autoguard.guards.Object.of({
            "headers": autoguard.guards.Intersection.of(autoguard.guards.Object.of({
                "content-type": autoguard.guards.String
            }, {}), autoguard.api.Headers),
            "payload": autoguard.guards.Reference.of(() => jws_1.Body)
        }, {
            "options": autoguard.guards.Intersection.of(autoguard.guards.Object.of({}, {
                "path": autoguard.guards.Array.of(autoguard.guards.String)
            }), autoguard.api.Options)
        }),
        "finalizeOrder": autoguard.guards.Object.of({
            "headers": autoguard.guards.Intersection.of(autoguard.guards.Object.of({
                "content-type": autoguard.guards.String
            }, {}), autoguard.api.Headers),
            "payload": autoguard.guards.Reference.of(() => jws_1.Body)
        }, {
            "options": autoguard.guards.Intersection.of(autoguard.guards.Object.of({}, {
                "path": autoguard.guards.Array.of(autoguard.guards.String)
            }), autoguard.api.Options)
        }),
        "getAccount": autoguard.guards.Object.of({
            "headers": autoguard.guards.Intersection.of(autoguard.guards.Object.of({
                "content-type": autoguard.guards.String
            }, {}), autoguard.api.Headers),
            "payload": autoguard.guards.Reference.of(() => jws_1.Body)
        }, {
            "options": autoguard.guards.Intersection.of(autoguard.guards.Object.of({}, {
                "path": autoguard.guards.Array.of(autoguard.guards.String)
            }), autoguard.api.Options)
        }),
        "getAuthorization": autoguard.guards.Object.of({
            "headers": autoguard.guards.Intersection.of(autoguard.guards.Object.of({
                "content-type": autoguard.guards.String
            }, {}), autoguard.api.Headers),
            "payload": autoguard.guards.Reference.of(() => jws_1.Body)
        }, {
            "options": autoguard.guards.Intersection.of(autoguard.guards.Object.of({}, {
                "path": autoguard.guards.Array.of(autoguard.guards.String)
            }), autoguard.api.Options)
        }),
        "getChallenge": autoguard.guards.Object.of({
            "headers": autoguard.guards.Intersection.of(autoguard.guards.Object.of({
                "content-type": autoguard.guards.String
            }, {}), autoguard.api.Headers),
            "payload": autoguard.guards.Reference.of(() => jws_1.Body)
        }, {
            "options": autoguard.guards.Intersection.of(autoguard.guards.Object.of({}, {
                "path": autoguard.guards.Array.of(autoguard.guards.String)
            }), autoguard.api.Options)
        }),
        "getDirectory": autoguard.guards.Object.of({}, {
            "options": autoguard.guards.Intersection.of(autoguard.guards.Object.of({}, {
                "path": autoguard.guards.Array.of(autoguard.guards.String)
            }), autoguard.api.Options),
            "headers": autoguard.guards.Intersection.of(autoguard.guards.Object.of({}, {}), autoguard.api.Headers),
            "payload": autoguard.api.Binary
        }),
        "getOrder": autoguard.guards.Object.of({
            "headers": autoguard.guards.Intersection.of(autoguard.guards.Object.of({
                "content-type": autoguard.guards.String
            }, {}), autoguard.api.Headers),
            "payload": autoguard.guards.Reference.of(() => jws_1.Body)
        }, {
            "options": autoguard.guards.Intersection.of(autoguard.guards.Object.of({}, {
                "path": autoguard.guards.Array.of(autoguard.guards.String)
            }), autoguard.api.Options)
        }),
        "newAccount": autoguard.guards.Object.of({
            "headers": autoguard.guards.Intersection.of(autoguard.guards.Object.of({
                "content-type": autoguard.guards.String
            }, {}), autoguard.api.Headers),
            "payload": autoguard.guards.Reference.of(() => jws_1.Body)
        }, {
            "options": autoguard.guards.Intersection.of(autoguard.guards.Object.of({}, {
                "path": autoguard.guards.Array.of(autoguard.guards.String)
            }), autoguard.api.Options)
        }),
        "newNonce": autoguard.guards.Object.of({}, {
            "options": autoguard.guards.Intersection.of(autoguard.guards.Object.of({}, {
                "path": autoguard.guards.Array.of(autoguard.guards.String)
            }), autoguard.api.Options),
            "headers": autoguard.guards.Intersection.of(autoguard.guards.Object.of({}, {}), autoguard.api.Headers),
            "payload": autoguard.api.Binary
        }),
        "newOrder": autoguard.guards.Object.of({
            "headers": autoguard.guards.Intersection.of(autoguard.guards.Object.of({
                "content-type": autoguard.guards.String
            }, {}), autoguard.api.Headers),
            "payload": autoguard.guards.Reference.of(() => jws_1.Body)
        }, {
            "options": autoguard.guards.Intersection.of(autoguard.guards.Object.of({}, {
                "path": autoguard.guards.Array.of(autoguard.guards.String)
            }), autoguard.api.Options)
        })
    };
    Autoguard.Responses = {
        "downloadCertificate": autoguard.guards.Object.of({
            "headers": autoguard.guards.Intersection.of(autoguard.guards.Object.of({
                "replay-nonce": autoguard.guards.String
            }, {}), autoguard.api.Headers)
        }, {
            "status": autoguard.guards.Number,
            "payload": autoguard.api.Binary
        }),
        "finalizeChallenge": autoguard.guards.Object.of({
            "headers": autoguard.guards.Intersection.of(autoguard.guards.Object.of({
                "replay-nonce": autoguard.guards.String
            }, {}), autoguard.api.Headers),
            "payload": autoguard.guards.Reference.of(() => exports.Challenge)
        }, {
            "status": autoguard.guards.Number
        }),
        "finalizeOrder": autoguard.guards.Object.of({
            "headers": autoguard.guards.Intersection.of(autoguard.guards.Object.of({
                "replay-nonce": autoguard.guards.String
            }, {}), autoguard.api.Headers),
            "payload": autoguard.guards.Reference.of(() => exports.Order)
        }, {
            "status": autoguard.guards.Number
        }),
        "getAccount": autoguard.guards.Object.of({
            "headers": autoguard.guards.Intersection.of(autoguard.guards.Object.of({
                "replay-nonce": autoguard.guards.String
            }, {}), autoguard.api.Headers),
            "payload": autoguard.guards.Reference.of(() => exports.Account)
        }, {
            "status": autoguard.guards.Number
        }),
        "getAuthorization": autoguard.guards.Object.of({
            "headers": autoguard.guards.Intersection.of(autoguard.guards.Object.of({
                "replay-nonce": autoguard.guards.String
            }, {}), autoguard.api.Headers),
            "payload": autoguard.guards.Reference.of(() => exports.Authorization)
        }, {
            "status": autoguard.guards.Number
        }),
        "getChallenge": autoguard.guards.Object.of({
            "headers": autoguard.guards.Intersection.of(autoguard.guards.Object.of({
                "replay-nonce": autoguard.guards.String
            }, {}), autoguard.api.Headers),
            "payload": autoguard.guards.Reference.of(() => exports.Challenge)
        }, {
            "status": autoguard.guards.Number
        }),
        "getDirectory": autoguard.guards.Object.of({
            "payload": autoguard.guards.Reference.of(() => exports.Directory)
        }, {
            "status": autoguard.guards.Number,
            "headers": autoguard.guards.Intersection.of(autoguard.guards.Object.of({}, {}), autoguard.api.Headers)
        }),
        "getOrder": autoguard.guards.Object.of({
            "headers": autoguard.guards.Intersection.of(autoguard.guards.Object.of({
                "replay-nonce": autoguard.guards.String
            }, {}), autoguard.api.Headers),
            "payload": autoguard.guards.Reference.of(() => exports.Order)
        }, {
            "status": autoguard.guards.Number
        }),
        "newAccount": autoguard.guards.Object.of({
            "headers": autoguard.guards.Intersection.of(autoguard.guards.Object.of({
                "replay-nonce": autoguard.guards.String,
                "location": autoguard.guards.String
            }, {}), autoguard.api.Headers),
            "payload": autoguard.guards.Reference.of(() => exports.Account)
        }, {
            "status": autoguard.guards.Number
        }),
        "newNonce": autoguard.guards.Object.of({
            "headers": autoguard.guards.Intersection.of(autoguard.guards.Object.of({
                "replay-nonce": autoguard.guards.String
            }, {}), autoguard.api.Headers)
        }, {
            "status": autoguard.guards.Number,
            "payload": autoguard.api.Binary
        }),
        "newOrder": autoguard.guards.Object.of({
            "headers": autoguard.guards.Intersection.of(autoguard.guards.Object.of({
                "replay-nonce": autoguard.guards.String,
                "location": autoguard.guards.String
            }, {}), autoguard.api.Headers),
            "payload": autoguard.guards.Reference.of(() => exports.Order)
        }, {
            "status": autoguard.guards.Number
        })
    };
})(Autoguard = exports.Autoguard || (exports.Autoguard = {}));
;
