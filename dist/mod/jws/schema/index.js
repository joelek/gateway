"use strict";
// This file was auto-generated by @joelek/autoguard. Edit at own risk.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Autoguard = exports.Body = exports.Protected = exports.SignatureAlgorithm = void 0;
const autoguard = require("@joelek/autoguard/dist/lib-shared");
var SignatureAlgorithm;
(function (SignatureAlgorithm) {
    SignatureAlgorithm[SignatureAlgorithm["HS256"] = 0] = "HS256";
    SignatureAlgorithm[SignatureAlgorithm["HS384"] = 1] = "HS384";
    SignatureAlgorithm[SignatureAlgorithm["HS512"] = 2] = "HS512";
    SignatureAlgorithm[SignatureAlgorithm["RS256"] = 3] = "RS256";
    SignatureAlgorithm[SignatureAlgorithm["RS384"] = 4] = "RS384";
    SignatureAlgorithm[SignatureAlgorithm["RS512"] = 5] = "RS512";
    SignatureAlgorithm[SignatureAlgorithm["ES256"] = 6] = "ES256";
    SignatureAlgorithm[SignatureAlgorithm["ES384"] = 7] = "ES384";
    SignatureAlgorithm[SignatureAlgorithm["ES512"] = 8] = "ES512";
    SignatureAlgorithm[SignatureAlgorithm["PS256"] = 9] = "PS256";
    SignatureAlgorithm[SignatureAlgorithm["PS384"] = 10] = "PS384";
    SignatureAlgorithm[SignatureAlgorithm["PS512"] = 11] = "PS512";
})(SignatureAlgorithm = exports.SignatureAlgorithm || (exports.SignatureAlgorithm = {}));
;
(function (SignatureAlgorithm) {
    SignatureAlgorithm.Entries = [
        { key: "HS256", value: 0 },
        { key: "HS384", value: 1 },
        { key: "HS512", value: 2 },
        { key: "RS256", value: 3 },
        { key: "RS384", value: 4 },
        { key: "RS512", value: 5 },
        { key: "ES256", value: 6 },
        { key: "ES384", value: 7 },
        { key: "ES512", value: 8 },
        { key: "PS256", value: 9 },
        { key: "PS384", value: 10 },
        { key: "PS512", value: 11 }
    ];
    SignatureAlgorithm.Keys = autoguard.tables.createKeys(SignatureAlgorithm.Entries);
    SignatureAlgorithm.Values = autoguard.tables.createValues(SignatureAlgorithm.Entries);
    SignatureAlgorithm.KeyToValueMap = autoguard.tables.createKeyToValueMap(SignatureAlgorithm.Entries);
    SignatureAlgorithm.ValueToKeyMap = autoguard.tables.createValueToKeyMap(SignatureAlgorithm.Entries);
    SignatureAlgorithm.Key = autoguard.guards.Key.of(SignatureAlgorithm.KeyToValueMap);
    SignatureAlgorithm.Value = autoguard.guards.Key.of(SignatureAlgorithm.ValueToKeyMap);
    function keyFromValue(value) {
        return SignatureAlgorithm.ValueToKeyMap[SignatureAlgorithm.Value.as(value)];
    }
    SignatureAlgorithm.keyFromValue = keyFromValue;
    ;
    function valueFromKey(key) {
        return SignatureAlgorithm.KeyToValueMap[SignatureAlgorithm.Key.as(key)];
    }
    SignatureAlgorithm.valueFromKey = valueFromKey;
    ;
})(SignatureAlgorithm = exports.SignatureAlgorithm || (exports.SignatureAlgorithm = {}));
;
exports.Protected = autoguard.guards.Object.of({
    "alg": autoguard.guards.Reference.of(() => SignatureAlgorithm.Key)
}, {});
exports.Body = autoguard.guards.Object.of({
    "protected": autoguard.guards.String,
    "payload": autoguard.guards.String,
    "signature": autoguard.guards.String
}, {});
var Autoguard;
(function (Autoguard) {
    Autoguard.Guards = {
        "Protected": autoguard.guards.Reference.of(() => exports.Protected),
        "Body": autoguard.guards.Reference.of(() => exports.Body)
    };
    Autoguard.Requests = {};
    Autoguard.Responses = {};
})(Autoguard = exports.Autoguard || (exports.Autoguard = {}));
;
