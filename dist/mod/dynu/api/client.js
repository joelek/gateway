"use strict";
// This file was auto-generated by @joelek/autoguard. Edit at own risk.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeClient = void 0;
const autoguard = require("@joelek/autoguard/dist/lib-client");
const shared = require("./index");
const makeClient = (clientOptions) => ({
    "listDomains": (request, requestOptions) => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c, _d, _e, _f;
        let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["listDomains"], clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.debugMode);
        guard.as(request, "request");
        let method = "GET";
        let components = new Array();
        components.push("dns");
        let parameters = new Array();
        parameters.push(...autoguard.api.encodeUndeclaredParameterPairs((_a = request.options) !== null && _a !== void 0 ? _a : {}, [...[], ...parameters.map((parameter) => parameter[0])]));
        let headers = new Array();
        headers.push(...autoguard.api.encodeUndeclaredHeaderPairs((_b = request.headers) !== null && _b !== void 0 ? _b : {}, headers.map((header) => header[0])));
        let payload = (_c = request.payload) !== null && _c !== void 0 ? _c : [];
        let requestHandler = (_d = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.requestHandler) !== null && _d !== void 0 ? _d : autoguard.api.xhr;
        let defaultHeaders = (_f = (_e = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.defaultHeaders) === null || _e === void 0 ? void 0 : _e.slice()) !== null && _f !== void 0 ? _f : [];
        defaultHeaders.push(["Content-Type", "application/octet-stream"]);
        defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
        let raw = yield requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
        {
            let status = raw.status;
            let headers = {};
            headers = Object.assign(Object.assign({}, headers), autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)));
            let payload = yield autoguard.api.deserializePayload(raw.payload);
            let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["listDomains"], clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.debugMode);
            let response = guard.as({ status, headers, payload }, "response");
            return new autoguard.api.ServerResponse(response, false);
        }
    }),
    "listDomainRecords": (request, requestOptions) => __awaiter(void 0, void 0, void 0, function* () {
        var _g, _h, _j, _k, _l, _m, _o;
        let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["listDomainRecords"], clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.debugMode);
        guard.as(request, "request");
        let method = "GET";
        let components = new Array();
        components.push("dns");
        components.push(...autoguard.api.encodeComponents([(_g = request.options) === null || _g === void 0 ? void 0 : _g["domainid"]], false));
        components.push("record");
        let parameters = new Array();
        parameters.push(...autoguard.api.encodeUndeclaredParameterPairs((_h = request.options) !== null && _h !== void 0 ? _h : {}, [...["domainid"], ...parameters.map((parameter) => parameter[0])]));
        let headers = new Array();
        headers.push(...autoguard.api.encodeUndeclaredHeaderPairs((_j = request.headers) !== null && _j !== void 0 ? _j : {}, headers.map((header) => header[0])));
        let payload = (_k = request.payload) !== null && _k !== void 0 ? _k : [];
        let requestHandler = (_l = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.requestHandler) !== null && _l !== void 0 ? _l : autoguard.api.xhr;
        let defaultHeaders = (_o = (_m = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.defaultHeaders) === null || _m === void 0 ? void 0 : _m.slice()) !== null && _o !== void 0 ? _o : [];
        defaultHeaders.push(["Content-Type", "application/octet-stream"]);
        defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
        let raw = yield requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
        {
            let status = raw.status;
            let headers = {};
            headers = Object.assign(Object.assign({}, headers), autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)));
            let payload = yield autoguard.api.deserializePayload(raw.payload);
            let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["listDomainRecords"], clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.debugMode);
            let response = guard.as({ status, headers, payload }, "response");
            return new autoguard.api.ServerResponse(response, false);
        }
    }),
    "createDomainRecord": (request, requestOptions) => __awaiter(void 0, void 0, void 0, function* () {
        var _p, _q, _r, _s, _t, _u;
        let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["createDomainRecord"], clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.debugMode);
        guard.as(request, "request");
        let method = "POST";
        let components = new Array();
        components.push("dns");
        components.push(...autoguard.api.encodeComponents([(_p = request.options) === null || _p === void 0 ? void 0 : _p["domainid"]], false));
        components.push("record");
        let parameters = new Array();
        parameters.push(...autoguard.api.encodeUndeclaredParameterPairs((_q = request.options) !== null && _q !== void 0 ? _q : {}, [...["domainid"], ...parameters.map((parameter) => parameter[0])]));
        let headers = new Array();
        headers.push(...autoguard.api.encodeUndeclaredHeaderPairs((_r = request.headers) !== null && _r !== void 0 ? _r : {}, headers.map((header) => header[0])));
        let payload = autoguard.api.serializePayload(request.payload);
        let requestHandler = (_s = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.requestHandler) !== null && _s !== void 0 ? _s : autoguard.api.xhr;
        let defaultHeaders = (_u = (_t = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.defaultHeaders) === null || _t === void 0 ? void 0 : _t.slice()) !== null && _u !== void 0 ? _u : [];
        defaultHeaders.push(["Content-Type", "application/json; charset=utf-8"]);
        defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
        let raw = yield requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
        {
            let status = raw.status;
            let headers = {};
            headers = Object.assign(Object.assign({}, headers), autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)));
            let payload = yield autoguard.api.deserializePayload(raw.payload);
            let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["createDomainRecord"], clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.debugMode);
            let response = guard.as({ status, headers, payload }, "response");
            return new autoguard.api.ServerResponse(response, false);
        }
    }),
    "updateDomainRecord": (request, requestOptions) => __awaiter(void 0, void 0, void 0, function* () {
        var _v, _w, _x, _y, _z, _0, _1;
        let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["updateDomainRecord"], clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.debugMode);
        guard.as(request, "request");
        let method = "POST";
        let components = new Array();
        components.push("dns");
        components.push(...autoguard.api.encodeComponents([(_v = request.options) === null || _v === void 0 ? void 0 : _v["domainid"]], false));
        components.push("record");
        components.push(...autoguard.api.encodeComponents([(_w = request.options) === null || _w === void 0 ? void 0 : _w["recordid"]], false));
        let parameters = new Array();
        parameters.push(...autoguard.api.encodeUndeclaredParameterPairs((_x = request.options) !== null && _x !== void 0 ? _x : {}, [...["domainid", "recordid"], ...parameters.map((parameter) => parameter[0])]));
        let headers = new Array();
        headers.push(...autoguard.api.encodeUndeclaredHeaderPairs((_y = request.headers) !== null && _y !== void 0 ? _y : {}, headers.map((header) => header[0])));
        let payload = autoguard.api.serializePayload(request.payload);
        let requestHandler = (_z = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.requestHandler) !== null && _z !== void 0 ? _z : autoguard.api.xhr;
        let defaultHeaders = (_1 = (_0 = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.defaultHeaders) === null || _0 === void 0 ? void 0 : _0.slice()) !== null && _1 !== void 0 ? _1 : [];
        defaultHeaders.push(["Content-Type", "application/json; charset=utf-8"]);
        defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
        let raw = yield requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
        {
            let status = raw.status;
            let headers = {};
            headers = Object.assign(Object.assign({}, headers), autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)));
            let payload = yield autoguard.api.deserializePayload(raw.payload);
            let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["updateDomainRecord"], clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.debugMode);
            let response = guard.as({ status, headers, payload }, "response");
            return new autoguard.api.ServerResponse(response, false);
        }
    }),
    "deleteDomainRecord": (request, requestOptions) => __awaiter(void 0, void 0, void 0, function* () {
        var _2, _3, _4, _5, _6, _7, _8, _9;
        let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["deleteDomainRecord"], clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.debugMode);
        guard.as(request, "request");
        let method = "DELETE";
        let components = new Array();
        components.push("dns");
        components.push(...autoguard.api.encodeComponents([(_2 = request.options) === null || _2 === void 0 ? void 0 : _2["domainid"]], false));
        components.push("record");
        components.push(...autoguard.api.encodeComponents([(_3 = request.options) === null || _3 === void 0 ? void 0 : _3["recordid"]], false));
        let parameters = new Array();
        parameters.push(...autoguard.api.encodeUndeclaredParameterPairs((_4 = request.options) !== null && _4 !== void 0 ? _4 : {}, [...["domainid", "recordid"], ...parameters.map((parameter) => parameter[0])]));
        let headers = new Array();
        headers.push(...autoguard.api.encodeUndeclaredHeaderPairs((_5 = request.headers) !== null && _5 !== void 0 ? _5 : {}, headers.map((header) => header[0])));
        let payload = (_6 = request.payload) !== null && _6 !== void 0 ? _6 : [];
        let requestHandler = (_7 = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.requestHandler) !== null && _7 !== void 0 ? _7 : autoguard.api.xhr;
        let defaultHeaders = (_9 = (_8 = clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.defaultHeaders) === null || _8 === void 0 ? void 0 : _8.slice()) !== null && _9 !== void 0 ? _9 : [];
        defaultHeaders.push(["Content-Type", "application/octet-stream"]);
        defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
        let raw = yield requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
        {
            let status = raw.status;
            let headers = {};
            headers = Object.assign(Object.assign({}, headers), autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)));
            let payload = yield autoguard.api.deserializePayload(raw.payload);
            let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["deleteDomainRecord"], clientOptions === null || clientOptions === void 0 ? void 0 : clientOptions.debugMode);
            let response = guard.as({ status, headers, payload }, "response");
            return new autoguard.api.ServerResponse(response, false);
        }
    }),
});
exports.makeClient = makeClient;
